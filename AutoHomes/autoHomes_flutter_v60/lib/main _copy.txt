import 'variable.dart';
import 'dart:convert';
import 'dart:async';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'package:dio/dio.dart';
// import 'package:auto_size_text/auto_size_text.dart';
import 'package:shared_preferences/shared_preferences.dart';
// import 'package:flutter_analog_clock/flutter_analog_clock.dart';
import 'package:analog_clock/analog_clock.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:slide_digital_clock/slide_digital_clock.dart';
import 'package:web_socket_channel/io.dart';

String aPIp = 'http://192.168.4.1/'; // AP Mode 일때 IP Address...
String stationIp = 'http://192.168.148.76/'; // Station Mode 일때 IP Address...
String s = ' ';

String voltPng = 'assets/images/car-battery.png';
String tempPng = 'assets/images/temp.png';

String voltText = ' ';
String tempText = ' ';
dynamic recvMessage;

List<int> pwm = [0, 0, 0, 0, 0, 0, 0];

late double dispHeight;
late double dispWidth;
late double pixelRatio;
late double txtScale;

bool statusFlag = false;
bool mobile = true; // true : 휴대폰, false : 태블릿
bool lteFlag = false;
bool sleepModeFlag = true;
bool sleepFlag = false;
bool sleepFlagReset = true;
bool sp1Flag = false;
bool sp2Flag = false;
bool sp3Flag = false;
bool sp4Flag = false;

// bool chChangeFlag = false; // ESP32로 부터 처음 채널을 읽어 저장하면 true;
bool displayDir = true;

bool netFlag = false;
bool serialDebug = false;

Server server = Server();

Color portraitBackColor = const Color(0xff333333);
Color mainFontColor = Colors.amber;
Color mainIconColor = Colors.amber;

const Color appBarColor = Color(0x552C1FFF); //FF39F1
const Color titleColor = Colors.white;

const Color slideFontColor = Colors.white;
const Color portraitSlideColor = Colors.white;

const Color ledOnColor = Color(0xFF6B56F5);
const Color ledOffColor = Colors.lime;

const Color outOnColor = Color(0xFF6B56F5);
const Color outOffColor = Colors.lime; //6F58FF;

const Color cleanBarColor = Colors.blue;
const Color cleanBackColor = Color(0x80F8FFFE);
const Color wasteBarColor = Colors.redAccent;
const Color wasteBackColor = Color(0x80F8FFFE);

bool timerRun = true;
bool beep = true;
bool colorFlag = true;

bool alertFlag = true;

int wifiCount = 0;

int cleanAdc = 0;
int wasteAdc = 0;

int aLowValue = 0;
int aHighValue = 0;
int bLowValue = 0;
int bHighValue = 0;

double hConstant = 21.79;
// double hConstant = 21.79;
double boardLine = 0.0026;
double borderRadius = 0.01;
double buttonRadius = 0.006;
double appBarHeight = 0.078;

// Upper Container 변수
final Color displayBackGroundColor = Colors.grey.shade500;

Color batColor = Colors.white;

bool wiFiCheck = false;

const timeout = Duration(seconds: 3);
const ms = Duration(milliseconds: 1);

bool connected = false; //boolean value to track if WebSocket is connected
late IOWebSocketChannel channel;

AudioPlayer advancedPlayer = AudioPlayer();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    final theme = ThemeData(primarySwatch: Colors.blue);
    final sliderTheme = theme.sliderTheme
        .copyWith(showValueIndicator: ShowValueIndicator.always);

    return GetMaterialApp(
      theme: theme.copyWith(sliderTheme: sliderTheme),
      initialRoute: "/",
      getPages: [
        GetPage(
            name: "/",
            page: () => const MyHomePage(),
            transition: Transition.fadeIn),
        GetPage(
            name: '/setting',
            page: () => const Setting(),
            transition: Transition.fadeIn),
        GetPage(
            name: '/watertank',
            page: () => const WaterTank(),
            transition: Transition.fadeIn),
        GetPage(
            name: '/wifichange',
            page: () => const WiFiChange(),
            transition: Transition.fadeIn),
        GetPage(
            name: '/sleepmode',
            page: () => const SleepMode(),
            transition: Transition.fadeIn),
        GetPage(
            name: '/phoneNumber',
            page: () => const PhoneNumber(),
            transition: Transition.fadeIn),
      ],
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);

    if (beep) advancedPlayer.play(AssetSource('sound/intro.mp3'));
    (() async {
      print("Start MyHomePage");
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        // File에 최초 저장시 null 대응...
        print('');
        print('ledName[1] : ${V.ledName[1]}');
        print('ledName[2] : ${V.ledName[2]}');
        print('ledName[3] : ${V.ledName[3]}');
        print('ledName[4] : ${V.ledName[4]}');
        print('ledName[5] : ${V.ledName[5]}');
        print('ledName[6] : ${V.ledName[6]}');
        print('');
        print('outName[1] : ${V.outName[1]}');
        print('outName[2] : ${V.outName[2]}');
        print('outName[3] : ${V.outName[3]}');
        print('outName[4] : ${V.outName[4]}');
        print('outName[5] : ${V.outName[5]}');
        print('outName[6] : ${V.outName[6]}');
        print('');
        V.ledName[1] = (prefs.getString('led1SaveName') ?? V.ledPushName[1]);
        V.ledName[2] = (prefs.getString('led2SaveName') ?? V.ledPushName[2]);
        V.ledName[3] = (prefs.getString('led3SaveName') ?? V.ledPushName[3]);
        V.ledName[4] = (prefs.getString('led4SaveName') ?? V.ledPushName[4]);
        V.ledName[5] = (prefs.getString('led5SaveName') ?? V.ledPushName[5]);
        V.ledName[6] = (prefs.getString('led6SaveName') ?? V.ledPushName[6]);

        V.outName[1] = (prefs.getString('out1SaveName') ?? V.outPushName[1]);
        V.outName[2] = (prefs.getString('out2SaveName') ?? V.outPushName[2]);
        V.outName[3] = (prefs.getString('out3SaveName') ?? V.outPushName[3]);
        V.outName[4] = (prefs.getString('out4SaveName') ?? V.outPushName[4]);
        V.outName[5] = (prefs.getString('out5SaveName') ?? V.outPushName[5]);
        V.outName[6] = (prefs.getString('out6SaveName') ?? V.outPushName[6]);

        print('ledName[1] : ${V.ledName[1]}');
        print('ledName[2] : ${V.ledName[2]}');
        print('ledName[3] : ${V.ledName[3]}');
        print('ledName[4] : ${V.ledName[4]}');
        print('ledName[5] : ${V.ledName[5]}');
        print('ledName[6] : ${V.ledName[6]}');

        print('');
        print('outName[1] : ${V.outName[1]}');
        print('outName[2] : ${V.outName[2]}');
        print('outName[3] : ${V.outName[3]}');
        print('outName[4] : ${V.outName[4]}');
        print('outName[5] : ${V.outName[5]}');
        print('outName[6] : ${V.outName[6]}');

        colorFlag = prefs.getBool('colorFlag') ?? true;
        beep = prefs.getBool('beep') ?? true;
        mobile = prefs.getBool('mobile') ?? true;
        displayDir = prefs.getBool('displayDir') ?? true;
        sleepModeFlag = prefs.getBool('sleepModeFlag') ?? true;
        V.wiFiType = prefs.getBool('wiFiType') ?? true;
        stationIp = prefs.getString('stationIp') ?? 'http://192.168.148.76/';

        V.ssid = prefs.getString('ssid') ?? 'CamTrol V3.5-001';
        V.password = prefs.getString('password') ?? '01211001001';

        V.isPhoneTable[1] = prefs.getBool('isPhoneTableFlag1') ?? true;
        V.isPhoneTable[2] = prefs.getBool('isPhoneTableFlag2') ?? false;
        V.isPhoneTable[3] = prefs.getBool('isPhoneTableFlag3') ?? false;
        V.isPhoneTable[4] = prefs.getBool('isPhoneTableFlag4') ?? false;
        V.isPhoneTable[5] = prefs.getBool('isPhoneTableFlag5') ?? false;

        V.phoneName[1] = prefs.getString('phoneName1') ?? '연락처 1 입력';
        V.phoneName[2] = prefs.getString('phoneName2') ?? '연락처 2 입력';
        V.phoneName[3] = prefs.getString('phoneName3') ?? '연락처 3 입력';
        V.phoneName[4] = prefs.getString('phoneName4') ?? '연락처 4 입력';
        V.phoneName[5] = prefs.getString('phoneName5') ?? '연락처 5 입력';

        V.phoneNumber[1] = prefs.getString('phoneNumber1') ?? '전화번호 입력';
        V.phoneNumber[2] = prefs.getString('phoneNumber2') ?? '전화번호 입력';
        V.phoneNumber[3] = prefs.getString('phoneNumber3') ?? '전화번호 입력';
        V.phoneNumber[4] = prefs.getString('phoneNumber4') ?? '전화번호 입력';
        V.phoneNumber[5] = prefs.getString('phoneNumber5') ?? '전화번호 입력';
      });
      // Debug mode 시 Error 발생...
    })();

    Future.delayed(Duration.zero, () async {
      // channelConnect(); //connect to WebSocket wth NodeMCU
      print("Try ChannelConnect...");
      try {
        channel = IOWebSocketChannel.connect(
            "ws://192.168.4.1:81"); //channel IP : Port
        channel.stream.listen(
          (message) {
            print("Message : $message");
            recvMessage = message;

            if (message == "connected") {
              netFlag = true;
            } else {
              // ignore: prefer_typing_uninitialized_variables
              var parsedJson;
              // parsedJson = jsonDecode(recvMessage);
              parsedJson = jsonDecode(message);

              V.btVolt = parsedJson['aux_v'];
              setState(() {});

              // if (parsedJson['data'] == "false") {
              //   connected = true; //message is "connected" from NodeMCU
              // }
            }
          },
          onDone: () {
            //if WebSocket is disconnected
            print("Web socket is disconnected");
            netFlag = false;
            // setState(() {
            // });
          },
          onError: (error) {
            print(error.toString());
            print("Socket Error");
          },
        );
      } catch (_) {
        print("error on connecting to websocket.");
      }
    });

    super.initState();
  }

  void handleTimeout() async {
    wiFiCheck = true;
    wifiCount++;

    print("V.btVolt : ${V.btVolt}");

    // if (connected) {
    sendCmd('{"division":"request","Value":1}');
    // }
    print("handleTimeout Message : $recvMessage");

// 휴대폰에서 Sleep Button 이 눌리면 실행...
    if (sleepFlagReset == true && sleepFlag == true && mobile == false) {
      sleepFlagReset = false;
      Get.toNamed('/sleepmode');
    } else if (sleepFlagReset == false &&
        sleepFlag == false &&
        mobile == false) {
      sleepFlagReset = true;
      Get.back();
    }

    print("wifiCount : $wifiCount");

    // if (wifiCount > 3) {
    //   netFlag = false;
    //   if (wifiCount > 100) {
    //     wifiCount = 10;
    //   }
    // } else {
    //   netFlag = true;
    // }

    if (V.wasteWater > 95 && alertFlag == true) {
      alertFlag = false;
      if (beep) advancedPlayer.play(AssetSource('sound/dongdong.mp3'));
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          backgroundColor: const Color(0xC0D4AA39),
          title: Text(
            "오수가 가득 찼습니다...",
            style: TextStyle(
              color: Colors.white,
              fontSize: mobile
                  ? (dispWidth * 0.05) / txtScale
                  : (dispHeight * 0.04) / txtScale,
            ),
          ),
          actions: <Widget>[
            // ignore: deprecated_member_use
            SizedBox(
              width: mobile ? dispWidth * 0.18 : dispWidth * 0.09,
              height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
              child: ElevatedButton(
                  child: Text(
                    "확인",
                    style: TextStyle(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: mobile
                          ? (dispWidth * 0.04) / txtScale
                          : (dispHeight * 0.03) / txtScale,
                    ),
                  ),
                  onPressed: () {
                    Get.back();
                    setState(() {});
                  }),
            ),
          ],
        ),
      );
    } else if (V.wasteWater != 100) {
      alertFlag = true;
    }
    if (V.comFlag == true) {
      // server.getReq("request", 0);
    }
    print("netFlag : $netFlag");
    setState(() {
      netFlag;
    });
    if (timerRun == false) startTimeout(5000);
  }

  startTimeout([int? milliseconds]) {
    var duration = milliseconds == null ? timeout : ms * milliseconds;
    return Timer(duration, handleTimeout);
  }

  Future<void> _ackAlert(BuildContext context) {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Not in stock'),
          content: const Text('This item is no longer available'),
          actions: <Widget>[
            // ignore: deprecated_member_use
            ElevatedButton(
              child: const Text('Ok'),
              onPressed: () {
                Get.back();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    // 초기 1회만 실행
    if (timerRun == true) {
      startTimeout(1000);
      timerRun = false;
    }

    if (V.comError == true) _ackAlert(context);

    dispHeight = MediaQuery.of(context).size.height;
    dispWidth = MediaQuery.of(context).size.width;
    pixelRatio = MediaQuery.of(context).devicePixelRatio;
    txtScale = MediaQuery.of(context).textScaleFactor;

    var rowSize = MediaQuery.of(context).textScaleFactor;
    // print('textScaleFactor : $rowSize');

    if (rowSize <= 1.0) {
      V.textScaleRatio = 1.0;
    } else if (rowSize > 1.0) {
      V.textScaleRatio = 0.7;
    }

    if (pixelRatio > 2.3) {
      mobile = true;
    } else {
      mobile = false;
    }

    mobile
        ? SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp])
        : displayDir
            ? SystemChrome.setPreferredOrientations(
                [DeviceOrientation.landscapeRight])
            : SystemChrome.setPreferredOrientations(
                [DeviceOrientation.landscapeLeft]);

    return mobile ? const PortScreen() : const LandScreen();
  }
}

class SleepMode extends StatefulWidget {
  const SleepMode({Key? key}) : super(key: key);

  @override
  State<SleepMode> createState() => _SleepModeState();
}

class _SleepModeState extends State<SleepMode> {
  @override
  void initState() {
    // Full Screen mode ...
    // SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0x80574B4C),
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(
          dispHeight * appBarHeight,
        ),
        child: AppBar(
          backgroundColor: const Color(0x80574B4C),
          iconTheme: const IconThemeData(
            color: Color(0xD0574B4C), //change your color here
          ),
          title: Text(
            '취침 모드...',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontStyle: FontStyle.italic,
              // color: Color(0xD0574B4C),
              color: Colors.black,
              fontSize: mobile
                  ? ((dispWidth * 0.03) / txtScale)
                  : ((dispHeight * 0.04) / txtScale),
            ),
          ),
          actions: <Widget>[
            IconButton(
              icon: Icon(Icons.settings,
                  size: mobile ? dispWidth * 0.045 : dispHeight * 0.05,
                  color: Colors.black),
              tooltip: '모드 설정',
              onPressed: () async {
                SharedPreferences prefs = await SharedPreferences.getInstance();
                sleepModeFlag = !sleepModeFlag;
                prefs.setBool('sleepModeFlag', sleepModeFlag);
                // if (beep) audioCache.play('sound/iconClick.mp3');
                // await server.getReq("wifiSend", 0); // ssid, password 읽어오기..
                // await Get.toNamed('/wifichange');
                // V.comFlag = false;
                setState(() {});
                // V.comFlag = true;
              },
            ),
            SizedBox(
              width: dispHeight * 0.02,
            ),
          ],
        ), // 공통으로 적용...
      ),
      body: InkWell(
        onTap: () async {
          if (beep) advancedPlayer.play(AssetSource('sound/dongdong.mp3'));
          // SystemChrome.setEnabledSystemUIMode(
          //     SystemUiMode.edgeToEdge); // Full Screen mode 해제...
          // V.comFlag = true;
          await server.getReq("sleep", 0);
          sleepFlag == false;
          Get.back();
        },
        child: Padding(
          padding: sleepModeFlag
              ? const EdgeInsets.all(20.0)
              : const EdgeInsets.all(0.0),
          child: sleepModeFlag
              ? AnalogClock(
                  decoration: BoxDecoration(
                      border: Border.all(width: 2.0, color: Colors.black),
                      color: Colors.transparent,
                      shape: BoxShape.circle),
                  width: 150.0,
                  isLive: true,
                  hourHandColor: Colors.black,
                  minuteHandColor: Colors.black,
                  showSecondHand: false,
                  numberColor: Colors.black87,
                  showNumbers: true,
                  showAllNumbers: false,
                  textScaleFactor: 1.4,
                  showTicks: false,
                  showDigitalClock: false,
                  datetime: DateTime(2019, 1, 1, 9, 12, 15),
                )
              // FlutterAnalogClock(
              //     dateTime: DateTime.now(),
              //     dialPlateColor: Color(0x40574B4C),
              //     hourHandColor: Color(0x803B5C4F), // 시침 색상...
              //     minuteHandColor: Color(0x803B5C4F), // 분침 색상...
              //     secondHandColor: Color(0x80D11F22), // 초침 색상
              //     numberColor: Colors.black, // 시간 색상...
              //     borderColor: Colors.black,
              //     tickColor: Colors.black,
              //     centerPointColor: Colors.black,
              //     showBorder: true,
              //     showTicks: true,
              //     showMinuteHand: true,
              //     showSecondHand: true,
              //     showNumber: true,
              //     borderWidth: 5.0,
              //     hourNumberScale: 0.6,
              //     hourNumbers: const [
              //       '1',
              //       '2',
              //       '3',
              //       '4',
              //       '5',
              //       '6',
              //       '7',
              //       '8',
              //       '9',
              //       '10',
              //       '11',
              //       '12'
              //     ],
              //   )
              : Container(color: Colors.black),
        ),
      ),
    );
  }
}

class PhoneNumber extends StatefulWidget {
  const PhoneNumber({Key? key}) : super(key: key);

  @override
  State<PhoneNumber> createState() => _PhoneNumberState();
}

class _PhoneNumberState extends State<PhoneNumber> {
  bool isPhoneCheck = true;

  final List<String> _phoneName = [' ', ' ', ' ', ' ', ' ', ' '];
  final List<String> _phoneNumber = [' ', ' ', ' ', ' ', ' ', ' '];

  final List<bool> _nameFlag = [false, false, false, false, false, false];
  final List<bool> _numberFlag = [false, false, false, false, false, false];

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // backgroundColor: Color(0x80574B4C),
      backgroundColor: const Color(0x8045FFA2),
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(
          mobile
              ? (dispHeight * appBarHeight) * 0.6
              : (dispHeight * appBarHeight),
        ),
        child: AppBar(
          title: Text(
            '긴급 연락처 등록...',
            style: TextStyle(
              color: titleColor,
              fontWeight: FontWeight.bold,
              fontSize: mobile
                  ? (dispHeight * 0.02) / txtScale
                  : (dispHeight * 0.04) / txtScale,
            ),
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            SizedBox(
              height: (mobile ? dispHeight : dispWidth) * 0.01,
            ),
            Container(
              // width: 300.0,
              // margin:
              //     const EdgeInsets.symmetric(vertical: 5.0), // Appbar와의 간격...
              width: dispWidth * 0.95,
              height: dispHeight * 0.4,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(mobile
                    ? dispHeight * borderRadius
                    : dispWidth * borderRadius),
                border: Border.all(
                    width:
                        mobile ? dispWidth * boardLine : dispHeight * boardLine,
                    color: Colors.black), //Container 테두리 값, 색상
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    // 1 번 Table...
                    children: [
                      Transform.scale(
                        scale: dispWidth * 0.003,
                        child: Checkbox(
                          activeColor: Colors.orange,
                          // shape: CircleBorder(),
                          splashRadius: 20,
                          value: V.isPhoneTable[1],
                          onChanged: (value) async {
                            SharedPreferences prefs =
                                await SharedPreferences.getInstance();
                            setState(() {
                              V.isPhoneTable[1] = value!;
                              prefs.setBool('isPhoneTableFlag1', value);
                            });
                          },
                        ),
                      ),
                      // SizedBox(height: dispHeight * 0.023),
                      SizedBox(
                        width: dispWidth * 0.35,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '이름 입력',
                            enabled: V.isPhoneTable[1] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneName[1],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[1] = true;
                            _phoneName[1] = text;
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.4,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '전화번호 입력',
                            enabled: V.isPhoneTable[1] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneNumber[1],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _numberFlag[1] = true;
                            _phoneNumber[1] = text;
                          },
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    // 2 번 Table...
                    children: [
                      Transform.scale(
                        scale: dispWidth * 0.003,
                        child: Checkbox(
                          activeColor: Colors.orange,
                          // shape: CircleBorder(),
                          splashRadius: 20,
                          value: V.isPhoneTable[2],
                          onChanged: (value) async {
                            SharedPreferences prefs =
                                await SharedPreferences.getInstance();
                            setState(() {
                              V.isPhoneTable[2] = value!;
                              prefs.setBool('isPhoneTableFlag2', value);
                            });
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.35,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '이름 입력',
                            enabled: V.isPhoneTable[2] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneName[2],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[2] = true;
                            _phoneName[2] = text;
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.4,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '전화번호 입력',
                            enabled: V.isPhoneTable[2] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneNumber[2],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _numberFlag[2] = true;
                            _phoneNumber[2] = text;
                          },
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    // 3 번 Table...
                    children: [
                      Transform.scale(
                        scale: dispWidth * 0.003,
                        child: Checkbox(
                          activeColor: Colors.orange,
                          // shape: CircleBorder(),
                          splashRadius: 20,
                          value: V.isPhoneTable[3],
                          onChanged: (value) async {
                            SharedPreferences prefs =
                                await SharedPreferences.getInstance();
                            setState(() {
                              V.isPhoneTable[3] = value!;
                              prefs.setBool('isPhoneTableFlag3', value);
                            });
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.35,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '이름 입력',
                            enabled: V.isPhoneTable[3] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneName[3],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[3] = true;
                            _phoneName[3] = text;
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.4,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '전화번호 입력',
                            enabled: V.isPhoneTable[3] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneNumber[3],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[3] = true;
                            _phoneNumber[3] = text;
                          },
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    // 4 번 Table...
                    children: [
                      Transform.scale(
                        scale: dispWidth * 0.003,
                        child: Checkbox(
                          activeColor: Colors.orange,
                          // shape: CircleBorder(),
                          splashRadius: 20,
                          value: V.isPhoneTable[4],
                          onChanged: (value) async {
                            SharedPreferences prefs =
                                await SharedPreferences.getInstance();
                            setState(() {
                              V.isPhoneTable[4] = value!;
                              prefs.setBool('isPhoneTableFlag4', value);
                            });
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.35,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '이름 입력',
                            enabled: V.isPhoneTable[4] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneName[4],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[4] = true;
                            _phoneName[4] = text;
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.4,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '전화번호 입력',
                            enabled: V.isPhoneTable[4] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneNumber[4],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _numberFlag[4] = true;
                            _phoneNumber[4] = text;
                          },
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    // 5 번 Table...
                    children: [
                      Transform.scale(
                        scale: dispWidth * 0.003,
                        child: Checkbox(
                          activeColor: Colors.orange,
                          // shape: CircleBorder(),
                          splashRadius: 20,
                          value: V.isPhoneTable[5],
                          onChanged: (value) async {
                            SharedPreferences prefs =
                                await SharedPreferences.getInstance();
                            setState(() {
                              V.isPhoneTable[5] = value!;
                              prefs.setBool('isPhoneTableFlag5', value);
                            });
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.35,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '이름 입력',
                            enabled: V.isPhoneTable[5] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneName[5],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _nameFlag[5] = true;
                            _phoneName[5] = text;
                          },
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.4,
                        height: dispHeight * 0.05,
                        child: TextField(
                          cursorColor: Colors.white,
                          style: TextStyle(
                              fontSize: dispWidth * 0.04,
                              // height: 1.0,
                              color: Colors.white),
                          decoration: InputDecoration(
                            // hintText: '전화번호 입력',
                            enabled: V.isPhoneTable[5] ? true : false,
                            focusedBorder: const OutlineInputBorder(
                              borderSide:
                                  BorderSide(color: Colors.black, width: 1.5),
                            ),
                            border: const OutlineInputBorder(),
                            labelText: V.phoneNumber[5],
                            labelStyle: const TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onChanged: (text) {
                            _numberFlag[5] = true;
                            _phoneNumber[5] = text;
                          },
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            SizedBox(
              height: dispHeight * 0.03,
            ),
            SizedBox(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  SizedBox(
                    width: dispWidth * 0.17,
                    height: dispHeight * 0.045,
                    child: ElevatedButton(
                      child: Text(
                        "저장",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: (dispWidth * 0.035) / txtScale,
                        ),
                      ),
                      onPressed: () async {
                        SharedPreferences prefs =
                            await SharedPreferences.getInstance();
                        setState(() {
                          if (!(_nameFlag[1] |
                              _nameFlag[2] |
                              _nameFlag[3] |
                              _nameFlag[4] |
                              _nameFlag[5] |
                              _numberFlag[1] |
                              _numberFlag[2] |
                              _numberFlag[3] |
                              _numberFlag[4] |
                              _numberFlag[5])) {
                            isPhoneCheck = false;
                          } else {
                            isPhoneCheck = true;
                          }

                          if (_nameFlag[1]) {
                            prefs.setString('phoneName1', _phoneName[1]);
                            V.phoneName[1] = _phoneName[1];
                          }
                          if (_numberFlag[1]) {
                            prefs.setString('phoneNumber1', _phoneNumber[1]);
                            V.phoneNumber[1] = _phoneNumber[1];
                          }

                          if (_nameFlag[2]) {
                            prefs.setString('phoneName2', _phoneName[2]);
                            V.phoneName[2] = _phoneName[2];
                          }
                          if (_numberFlag[2]) {
                            prefs.setString('phoneNumber2', _phoneNumber[2]);
                            V.phoneNumber[2] = _phoneNumber[2];
                          }

                          if (_nameFlag[3]) {
                            prefs.setString('phoneName3', _phoneName[3]);
                            V.phoneName[3] = _phoneName[3];
                          }
                          if (_numberFlag[3]) {
                            prefs.setString('phoneNumber3', _phoneNumber[3]);
                            V.phoneNumber[3] = _phoneNumber[3];
                          }

                          if (_nameFlag[4]) {
                            prefs.setString('phoneName4', _phoneName[4]);
                            V.phoneName[4] = _phoneName[4];
                          }
                          if (_numberFlag[4]) {
                            prefs.setString('phoneNumber4', _phoneNumber[4]);
                            V.phoneNumber[4] = _phoneNumber[4];
                          }

                          if (_nameFlag[5]) {
                            prefs.setString('phoneName5', _phoneName[5]);
                            V.phoneName[5] = _phoneName[5];
                          }
                          if (_numberFlag[5]) {
                            prefs.setString('phoneNumber5', _phoneNumber[5]);
                            V.phoneNumber[5] = _phoneNumber[5];
                          }

                          // if (_nameFlag[1]) {
                          //   prefs.setString('phoneName1', _phoneName[1]);
                          //   prefs.setString('phoneNumber1', _phoneNumber[1]);
                          //   V.phoneName[1] = _phoneName[1];
                          //   V.phoneNumber[1] = _phoneNumber[1];
                          // }
                          // if (V.isPhoneTable[2]) {
                          //   prefs.setString('phoneName2', _phoneName[2]);
                          //   prefs.setString('phoneNumber2', _phoneNumber[2]);
                          //   V.phoneName[2] = _phoneName[2];
                          //   V.phoneNumber[2] = _phoneNumber[2];
                          // }
                          // if (V.isPhoneTable[3]) {
                          //   prefs.setString('phoneName3', _phoneName[3]);
                          //   prefs.setString('phoneNumber3', _phoneNumber[3]);
                          //   V.phoneName[3] = _phoneName[3];
                          //   V.phoneNumber[3] = _phoneNumber[3];
                          // }
                          // if (V.isPhoneTable[4]) {
                          //   prefs.setString('phoneName4', _phoneName[4]);
                          //   prefs.setString('phoneNumber4', _phoneNumber[4]);
                          //   V.phoneName[4] = _phoneName[4];
                          //   V.phoneNumber[4] = _phoneNumber[4];
                          // }
                          // if (V.isPhoneTable[5]) {
                          //   prefs.setString('phoneName5', _phoneName[5]);
                          //   prefs.setString('phoneNumber5', _phoneNumber[5]);
                          //   V.phoneName[5] = _phoneName[5];
                          //   V.phoneNumber[5] = _phoneNumber[5];
                          // }
                          // if (!V.isPhoneTable[1] &&
                          //     !V.isPhoneTable[2] &&
                          //     !V.isPhoneTable[3] &&
                          //     !V.isPhoneTable[4] &&
                          //     !V.isPhoneTable[5]) {
                          //   isPhoneCheck = false;
                          // } else {
                          //   isPhoneCheck = true;
                          // }
                        });
                        if (beep) {
                          advancedPlayer.play(AssetSource('sound/intro.mp3'));
                        }
                        // ignore: use_build_context_synchronously
                        showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            backgroundColor: const Color(0xC0D4AA39),
                            title: Text(
                              isPhoneCheck ? "저장 되었습니다." : "변경된 내용이 없습니다.",
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: (dispWidth * 0.05) / txtScale,
                              ),
                            ),
                            actions: <Widget>[
                              // ignore: deprecated_member_use
                              SizedBox(
                                width: dispWidth * 0.17,
                                height: dispHeight * 0.045,
                                child: ElevatedButton(
                                    child: Text(
                                      "확인",
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontWeight: FontWeight.bold,
                                        fontSize:
                                            (dispWidth * 0.035) / txtScale,
                                      ),
                                    ),
                                    onPressed: () {
                                      // server.getReq("SensorSend", 0);
                                      Get.back();
                                    }),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                  SizedBox(width: dispWidth * 0.1),
                  SizedBox(
                    width: dispWidth * 0.17,
                    height: dispHeight * 0.045,
                    child: ElevatedButton(
                      child: Text(
                        "취소",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: (dispWidth * 0.035) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/iconClick.mp3'));
                        }
                        Get.back();
                      },
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class WiFiChange extends StatefulWidget {
  const WiFiChange({Key? key}) : super(key: key);

  @override
  State<WiFiChange> createState() => WiFiChangeState();
}

class WiFiChangeState extends State<WiFiChange> {
  final stationIpController = TextEditingController();

  bool wifiSelect = V.wiFiType; // WiFi : True, Hot Spot : false...
  bool ssidFlag = false;
  bool passWordFlag = false;
  bool ipFlag = false;
  bool isSwitched = false;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    // ssidController.dispose();
    // passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0x8045FFA2),
      // backgroundColor: appBarColor,
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(
          mobile
              ? (dispHeight * appBarHeight) * 0.6
              : (dispHeight * appBarHeight),
        ),
        child: AppBar(
          title: Text(
            'WiFi 네트워크 변경...',
            style: TextStyle(
              color: titleColor,
              fontWeight: FontWeight.bold,
              fontSize: mobile
                  ? (dispHeight * 0.02) / txtScale
                  : (dispHeight * 0.04) / txtScale,
            ),
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: <Widget>[
              SizedBox(
                // appbar 와 간격 띄우기...
                height: (mobile ? dispHeight : dispWidth) * 0.01,
              ),
              Container(
                width: wifiSelect
                    ? mobile // WiFi Mode 일 때 가로넓이...
                        ? dispWidth * 0.6
                        : dispHeight * 0.5
                    : mobile // 테더링 Mode 일 때 가로넓이...
                        ? dispWidth * 0.85
                        : dispHeight * 0.7,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(mobile
                      ? dispHeight * borderRadius
                      : dispWidth * borderRadius),
                  border: Border.all(
                      width: mobile
                          ? dispWidth * boardLine
                          : dispHeight * boardLine,
                      color: Colors.black), //Container 테두리 값, 색상
                ),
                child: Column(
                  // mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    wifiSelect
                        ? const SizedBox.shrink()
                        : SizedBox(
                            height:
                                mobile ? dispHeight * 0.02 : dispWidth * 0.02,
                          ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? const SizedBox.shrink()
                            : SizedBox(
                                // 테더링 추가 연결이면 표시...
                                width:
                                    mobile ? dispWidth * 0.6 : dispWidth * 0.3,
                                height: mobile
                                    ? dispHeight * 0.05
                                    : dispWidth * 0.045,
                                child: TextField(
                                  cursorColor: Colors.white,
                                  onChanged: (text) {
                                    V.ssidBuffer = text;
                                    ssidFlag = true;
                                  },
                                  // controller: ssidController,
                                  style: TextStyle(
                                    fontSize: mobile
                                        ? (dispWidth * 0.05) / txtScale
                                        : (dispHeight * 0.035) / txtScale,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black,
                                  ),
                                  decoration: InputDecoration(
                                    labelText: V.ssid,
                                    // hintText: '네트워크 이름 입력 (영문 30자 이내)',
                                    // hintStyle: TextStyle(
                                    //   fontSize: 12.0,
                                    //   color: Colors.black,
                                    // ),
                                    labelStyle: const TextStyle(
                                      // fontSize: mobile
                                      //     ? (dispWidth * 0.03) / txtScale
                                      //     : (dispHeight * 0.03) / txtScale,
                                      color: Colors.white,
                                    ),
                                    focusedBorder: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                      borderSide: BorderSide(
                                        width: 2,
                                        color: Color(0xE0D4AA39),
                                      ),
                                    ),
                                    border: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                    ),
                                  ),
                                  // keyboardType: TextInputType.streetAddress,
                                ),
                              ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? const SizedBox.shrink()
                            : Text(
                                '네트워크 SSID를 입력 합니다.',
                                style: TextStyle(
                                  fontSize: mobile
                                      ? (dispWidth * 0.04) / txtScale
                                      : (dispHeight * 0.035) / txtScale,
                                ),
                              ),
                    mobile
                        ? SizedBox(
                            height: mobile
                                ? (dispHeight * 0.03) / 2
                                : (dispWidth * 0.04) / 2)
                        : const SizedBox.shrink(),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : SizedBox(
                            height: mobile
                                ? (dispHeight * 0.03) / 2
                                : (dispWidth * 0.04) / 2,
                          ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? const SizedBox.shrink()
                            : SizedBox(
                                width:
                                    mobile ? dispWidth * 0.6 : dispWidth * 0.3,
                                height: mobile
                                    ? dispHeight * 0.05
                                    : dispWidth * 0.045,
                                child: TextField(
                                  cursorColor: Colors.white,
                                  onChanged: (text) {
                                    V.passwordBuffer = text;
                                    passWordFlag = true;
                                  },
                                  // controller: passwordController,
                                  style: TextStyle(
                                    fontSize: mobile
                                        ? (dispWidth * 0.05) / txtScale
                                        : (dispHeight * 0.035) / txtScale,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black,
                                  ),
                                  decoration: InputDecoration(
                                    labelText: V.password,
                                    // hintText: '비밀번호 입력 (30자 이내)',
                                    // hintStyle: TextStyle(
                                    //   fontSize: 12.0,
                                    //   color: Colors.black,
                                    // ),
                                    labelStyle: const TextStyle(
                                      color: Colors.white,
                                    ),
                                    focusedBorder: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                      borderSide: BorderSide(
                                        width: 2,
                                        color: Color(0xE0D4AA39),
                                      ),
                                    ),
                                    border: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                    ),
                                  ),
                                  // keyboardType: TextInputType.streetAddress,
                                ),
                              ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? const SizedBox.shrink()
                            : Text(
                                '네트워크 비밀번호를 입력 합니다.',
                                style: TextStyle(
                                  fontSize: mobile
                                      ? (dispWidth * 0.04) / txtScale
                                      : (dispHeight * 0.035) / txtScale,
                                ),
                              ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : SizedBox(
                            height:
                                mobile ? dispHeight * 0.03 : dispWidth * 0.02,
                          ),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? SizedBox(
                                width:
                                    mobile ? dispWidth * 0.6 : dispWidth * 0.3,
                                height: mobile
                                    ? dispHeight * 0.05
                                    : dispWidth * 0.045,
                                child: TextField(
                                  cursorColor: Colors.white,
                                  onChanged: (text) {
                                    V.ipBuffer = stationIpController.text;
                                    print('ipBuffer : ${V.ipBuffer}');
                                    stationIp = 'http://';
                                    stationIp += V.ipBuffer;
                                    stationIp += '/';
                                    ipFlag = true;
                                  },
                                  controller: stationIpController,
                                  style: TextStyle(
                                    fontSize: mobile
                                        ? (dispWidth * 0.05) / txtScale
                                        : (dispHeight * 0.035) / txtScale,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black,
                                  ),
                                  decoration: InputDecoration(
                                    labelText: stationIp,
                                    // hintText: 'IP 주소 입력 (숫자만 입력 합니다.)',
                                    // hintStyle: TextStyle(
                                    //   fontSize: 12.0,
                                    //   color: Colors.black,
                                    // ),
                                    labelStyle:
                                        const TextStyle(color: Colors.white),
                                    focusedBorder: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                      borderSide: BorderSide(
                                        width: 2,
                                        color: Color(0xE0D4AA39),
                                      ),
                                    ),
                                    border: const OutlineInputBorder(
                                      borderRadius: BorderRadius.all(
                                          Radius.circular(5.0)),
                                    ),
                                  ),
                                  // keyboardType: TextInputType.number,
                                ),
                              )
                            : const SizedBox.shrink(),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : isSwitched
                            ? Text(
                                '숫자와 점 만 입력 합니다. 예) 192.168.148.76',
                                style: TextStyle(
                                  fontSize: mobile
                                      ? (dispWidth * 0.038) / txtScale
                                      : (dispHeight * 0.03) / txtScale,
                                ),
                              )
                            : const SizedBox.shrink(),

                    // mobile ? SizedBox(height: 5.0) : SizedBox.shrink(),
                    wifiSelect
                        ? const SizedBox.shrink()
                        : const SizedBox(height: 20.0),
                    RadioListTile(
                      activeColor: Colors.black,
                      title: Text(
                        '와이파이 연결',
                        style: TextStyle(
                            color: Colors.black,
                            fontSize: mobile
                                ? (dispWidth * 0.04) / txtScale
                                : (dispHeight * 0.025) / txtScale,
                            fontStyle: FontStyle.italic,
                            fontWeight: FontWeight.w800),
                      ),
                      value: WiFi.A,
                      // groupValue: V.wiFiType ? wiFi.A : wiFi.B,
                      groupValue: wifiSelect ? WiFi.A : WiFi.B,
                      onChanged: (value) /*async*/ {
                        wifiSelect = true;
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/iconClick.mp3'));
                        }
                        setState(() {});
                      },
                    ),
                    RadioListTile(
                      activeColor: Colors.black,
                      title: Text(
                        isSwitched ? '테더링 추가 연결' : '테더링 네트워크 저장',
                        style: TextStyle(
                            color: Colors.black,
                            fontSize: mobile
                                ? (dispWidth * 0.04) / txtScale
                                : (dispHeight * 0.025) / txtScale,
                            fontStyle: FontStyle.italic,
                            fontWeight: FontWeight.w800),
                      ),
                      value: WiFi.B,
                      // groupValue: V.wiFiType ? wiFi.A : wiFi.B,
                      groupValue: wifiSelect ? WiFi.A : WiFi.B,
                      onChanged: (value) async {
                        wifiSelect = false;
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/iconClick.mp3'));
                        }
                        // wifiSelect = false;
                        // server.getReq("wifiSend", 0);
                        setState(() {});
                      },
                    ),
                    SizedBox(
                        height: mobile ? dispHeight * 0.02 : dispWidth * 0.02),
                    SizedBox(
                      child: wifiSelect
                          ? null
                          : Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              // ignore: prefer_const_literals_to_create_immutables
                              children: <Widget>[
                                Text(
                                  "네트워크 저장",
                                  style: TextStyle(
                                    color: Colors.black,
                                    fontWeight: FontWeight.bold,
                                    fontSize: mobile
                                        ? (dispWidth * 0.04) / txtScale
                                        : (dispHeight * 0.025) / txtScale,
                                  ),
                                ),
                                Switch(
                                  value: isSwitched,
                                  onChanged: (value) {
                                    setState(() {
                                      isSwitched = value;
                                      print(isSwitched);
                                    });
                                  },
                                  activeTrackColor: Colors.lightGreenAccent,
                                  activeColor: Colors.green,
                                ),
                                Text(
                                  "네트워크 접속",
                                  style: TextStyle(
                                    color: Colors.black,
                                    fontWeight: FontWeight.bold,
                                    fontSize: mobile
                                        ? (dispWidth * 0.04) / txtScale
                                        : (dispHeight * 0.025) / txtScale,
                                  ),
                                ),
                              ],
                            ),
                    ),
                    SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                    ),
                    SizedBox(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          SizedBox(
                            width: mobile ? dispWidth * 0.17 : dispWidth * 0.09,
                            height:
                                mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                            child: ElevatedButton(
                              child: Text(
                                "저장",
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: mobile
                                      ? (dispWidth * 0.035) / txtScale
                                      : (dispHeight * 0.03) / txtScale,
                                ),
                              ),
                              onPressed: () async {
                                SharedPreferences prefs =
                                    await SharedPreferences.getInstance();
                                // V.comFlag = true;
                                prefs.setBool('wiFiType', wifiSelect);
                                if (ssidFlag) {
                                  V.ssid = V.ssidBuffer;
                                  prefs.setString('ssid', V.ssidBuffer);
                                }
                                if (passWordFlag) {
                                  V.password = V.passwordBuffer;
                                  prefs.setString('password', V.passwordBuffer);
                                }
                                if (ipFlag) {
                                  prefs.setString('stationIp', stationIp);
                                }

                                server.getReq(
                                    "wifiSend", 1); // ssid, password 저장하기...
                                // if (wifiSelect == false) {
                                //   server.getReq("wifiSend", 1);
                                // } // ssid, password 저장하기...

                                setState(() {
                                  // V.wiFiType = wifiSelect;
                                  // prefs.setBool('wiFiType', wifiSelect);
                                  // prefs.setString('stationIp', stationIp);
                                  // prefs.setString('ssid', V.ssidBuffer);
                                  // prefs.setString('password', V.passwordBuffer);
                                  // V.ssid = V.ssidBuffer;
                                  // V.password = V.passwordBuffer;
                                  // print("ssid : ${V.ssid}");
                                  // print("password : ${V.password}");
                                  // print("ip Address : $stationIp");
                                });
                                print('WiFi Type : ${V.wiFiType}');
                                // V.comFlag = false;
                                if (beep) {
                                  advancedPlayer
                                      .play(AssetSource('sound/intro.mp3'));
                                }
                                // ignore: use_build_context_synchronously
                                showDialog(
                                  context: context,
                                  builder: (context) => AlertDialog(
                                    backgroundColor: const Color(0xC0D4AA39),
                                    title: Text(
                                      "저장 되었습니다.",
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: mobile
                                            ? (dispWidth * 0.045) / txtScale
                                            : (dispHeight * 0.035) / txtScale,
                                      ),
                                    ),
                                    actions: <Widget>[
                                      // ignore: deprecated_member_use
                                      SizedBox(
                                        width: mobile
                                            ? dispWidth * 0.17
                                            : dispWidth * 0.09,
                                        height: mobile
                                            ? dispHeight * 0.045
                                            : dispHeight * 0.07,
                                        child: ElevatedButton(
                                            child: Text(
                                              "확인",
                                              style: TextStyle(
                                                color: Colors.black,
                                                fontWeight: FontWeight.bold,
                                                fontSize: mobile
                                                    ? (dispWidth * 0.035) /
                                                        txtScale
                                                    : (dispHeight * 0.03) /
                                                        txtScale,
                                              ),
                                            ),
                                            onPressed: () {
                                              // server.getReq("SensorSend", 0);
                                              Get.back();
                                            }),
                                      ),
                                    ],
                                  ),
                                );
                              },
                            ),
                          ),
                          SizedBox(
                              width: mobile
                                  ? dispHeight * 0.04
                                  : dispWidth * 0.04),
                          SizedBox(
                            width: mobile ? dispWidth * 0.17 : dispWidth * 0.09,
                            height:
                                mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                            child: ElevatedButton(
                              child: Text(
                                "취소",
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: mobile
                                      ? (dispWidth * 0.035) / txtScale
                                      : (dispHeight * 0.03) / txtScale,
                                ),
                              ),
                              onPressed: () {
                                if (beep) {
                                  advancedPlayer
                                      .play(AssetSource('sound/iconClick.mp3'));
                                }
                                Get.back();
                              },
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(
                        height: mobile ? dispHeight * 0.02 : dispWidth * 0.02),
                  ],
                ),
              ),
              SizedBox(
                // 컨테이너 하단부 간격 띄우기 간격 띄우기...
                height: (mobile ? dispHeight : dispWidth) * 0.05,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class Setting extends StatefulWidget {
  const Setting({Key? key}) : super(key: key);

  @override
  State<Setting> createState() => _SettingState();
}

enum CleanSensor { A, B }

enum WasteSensor { A, B }

enum WiFi { A, B }

class _SettingState extends State<Setting> {
  @override
  void initState() {
    super.initState();
    (() async {
      await server.getReq("read", 0); // 청수, 오수 센서 Type 읽어오기...
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        // File에 최초 저장시 null 대응...
        V.ledName[1] = prefs.getString('led1SaveName') ?? V.ledPushName[1];
        V.ledName[2] = prefs.getString('led2SaveName') ?? V.ledPushName[2];
        V.ledName[3] = prefs.getString('led3SaveName') ?? V.ledPushName[3];
        V.ledName[4] = prefs.getString('led4SaveName') ?? V.ledPushName[4];
        V.ledName[5] = prefs.getString('led5SaveName') ?? V.ledPushName[5];
        V.ledName[6] = prefs.getString('led6SaveName') ?? V.ledPushName[6];

        V.outName[1] = prefs.getString('out1SaveName') ?? V.outPushName[1];
        V.outName[2] = prefs.getString('out2SaveName') ?? V.outPushName[2];
        V.outName[3] = prefs.getString('out3SaveName') ?? V.outPushName[3];
        V.outName[4] = prefs.getString('out4SaveName') ?? V.outPushName[4];
        V.outName[5] = prefs.getString('out5SaveName') ?? V.outPushName[5];
        V.outName[6] = prefs.getString('out6SaveName') ?? V.outPushName[6];
      });
    })();
    // initSpeechRecognizer();
    //  permission(); //프로그램 최초 mic 권한 얻기..
  }

  final double valueHeight = 40;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0x8045FFA2),
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(
          mobile
              ? (dispHeight * appBarHeight) * 0.6
              : (dispHeight * appBarHeight),
        ),
        child: AppBar(
          title: Text(
            '버튼, 센서 설정...',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: mobile
                  ? (dispHeight * 0.02) / txtScale
                  : (dispHeight * 0.04) / txtScale,
            ),
          ),
          actions: <Widget>[
            mobile
                ? const SizedBox.shrink()
                : IconButton(
                    icon: Icon(Icons.menu_book, size: dispHeight * 0.05),
                    tooltip: '설명서',
                    onPressed: () async {
                      if (beep) {
                        advancedPlayer.play(AssetSource('sound/iconClick.mp3'));
                      }
                    },
                  ),
            SizedBox(
                width: mobile
                    ? (pixelRatio > 1.5)
                        ? dispWidth * 0.0015
                        : dispWidth * 0.03
                    : (pixelRatio > 1.5)
                        ? dispWidth * 0.015
                        : dispWidth * 0.03),
            IconButton(
              icon: Icon(Icons.settings_backup_restore,
                  size: mobile ? dispWidth * 0.06 : dispHeight * 0.05),
              tooltip: '초기화',
              onPressed: () async {
                // V.comFlag = false;
                if (beep) advancedPlayer.play(AssetSource('sound/intro.mp3'));
                await showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    backgroundColor: const Color(0xC0D4AA39),
                    title: Text(
                      "출력 이름을 초기화 합니다.",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: mobile
                            ? (dispWidth * 0.05) / txtScale
                            : (dispHeight * 0.035) / txtScale,
                      ),
                    ),
                    actions: <Widget>[
                      // ignore: deprecated_member_use
                      SizedBox(
                        width: mobile ? dispWidth * 0.14 : dispWidth * 0.09,
                        height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                        child: ElevatedButton(
                            child: Text(
                              "예",
                              style: TextStyle(
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: mobile
                                    ? (dispWidth * 0.04) / txtScale
                                    : (dispHeight * 0.03) / txtScale,
                              ),
                            ),
                            onPressed: () {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              V.ledName[1] = V.ledPushName[1];
                              V.ledName[2] = V.ledPushName[2];
                              V.ledName[3] = V.ledPushName[3];
                              V.ledName[4] = V.ledPushName[4];
                              V.ledName[5] = V.ledPushName[5];
                              V.ledName[6] = V.ledPushName[6];

                              V.outName[1] = V.outPushName[1];
                              V.outName[2] = V.outPushName[2];
                              V.outName[3] = V.outPushName[3];
                              V.outName[4] = V.outPushName[4];
                              V.outName[5] = V.outPushName[5];
                              V.outName[6] = V.outPushName[6];

                              Get.back();
                            }),
                      ),
                      SizedBox(
                          width: mobile ? dispHeight * 0.04 : dispWidth * 0.04),
                      // ignore: deprecated_member_use
                      SizedBox(
                        width: mobile ? dispWidth * 0.21 : dispWidth * 0.1,
                        height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                        child: ElevatedButton(
                            child: Text(
                              "아니요",
                              style: TextStyle(
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: mobile
                                    ? (dispWidth * 0.04) / txtScale
                                    : (dispHeight * 0.03) / txtScale,
                              ),
                            ),
                            onPressed: () {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              Get.back();
                            }),
                      ),
                      // SizedBox(
                      //     width: mobile ? dispHeight * 0.02 : dispWidth * 0.02),
                    ],
                  ),
                );
                setState(() {});
              },
            ),
            SizedBox(
                width: mobile
                    ? (pixelRatio > 1.5)
                        ? dispWidth * 0.0015
                        : dispWidth * 0.03
                    : (pixelRatio > 1.5)
                        ? dispWidth * 0.001
                        : dispWidth * 0.03),
            IconButton(
              icon: Icon(Icons.save_alt,
                  size: mobile ? dispWidth * 0.06 : dispHeight * 0.05),
              tooltip: '저장',
              onPressed: () /*async*/ {
                if (beep) advancedPlayer.play(AssetSource('sound/intro.mp3'));
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    backgroundColor: const Color(0xC0D4AA39),
                    title: Text(
                      "변경된 내용을 저장 합니다.",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: mobile
                            ? (dispWidth * 0.05) / txtScale
                            : (dispHeight * 0.035) / txtScale,
                      ),
                    ),
                    actions: <Widget>[
                      // ignore: deprecated_member_use
                      SizedBox(
                        width: mobile ? dispWidth * 0.14 : dispWidth * 0.09,
                        height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                        child: ElevatedButton(
                            child: Text(
                              "예",
                              style: TextStyle(
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: mobile
                                    ? (dispWidth * 0.04) / txtScale
                                    : (dispHeight * 0.03) / txtScale,
                              ),
                            ),
                            onPressed: () async {
                              server.getReq("SensorSend", 0);
                              SharedPreferences prefs =
                                  await SharedPreferences.getInstance();
                              setState(() {
                                prefs.setString('led1SaveName', V.ledName[1]);
                                prefs.setString('led2SaveName', V.ledName[2]);
                                prefs.setString('led3SaveName', V.ledName[3]);
                                prefs.setString('led4SaveName', V.ledName[4]);
                                prefs.setString('led5SaveName', V.ledName[5]);
                                prefs.setString('led6SaveName', V.ledName[6]);

                                print('led1 name : ${V.ledName[1]}');
                                print('led2 name : ${V.ledName[2]}');
                                print('led3 name : ${V.ledName[3]}');
                                print('led4 name : ${V.ledName[4]}');
                                print('led5 name : ${V.ledName[5]}');
                                print('led6 name : ${V.ledName[6]}');

                                prefs.setString('out1SaveName', V.outName[1]);
                                prefs.setString('out2SaveName', V.outName[2]);
                                prefs.setString('out3SaveName', V.outName[3]);
                                prefs.setString('out4SaveName', V.outName[4]);
                                prefs.setString('out5SaveName', V.outName[5]);
                                prefs.setString('out6SaveName', V.outName[6]);

                                print('out1 name : ${V.outName[1]}');
                                print('out2 name : ${V.outName[2]}');
                                print('out3 name : ${V.outName[3]}');
                                print('out4 name : ${V.outName[4]}');
                                print('out5 name : ${V.outName[5]}');
                                print('out6 name : ${V.outName[6]}');
                              });
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              Get.back();
                            }),
                      ),
                      SizedBox(
                          width: mobile ? dispHeight * 0.04 : dispWidth * 0.04),
                      // ignore: deprecated_member_use
                      SizedBox(
                        width: mobile ? dispWidth * 0.22 : dispWidth * 0.1,
                        height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                        child: ElevatedButton(
                            child: Text(
                              "아니요",
                              style: TextStyle(
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: mobile
                                    ? (dispWidth * 0.04) / txtScale
                                    : (dispHeight * 0.03) / txtScale,
                              ),
                            ),
                            onPressed: () {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              Get.back();
                            }),
                      ),
                    ],
                  ),
                );
              },
            ),
            SizedBox(
                width: mobile
                    ? dispWidth * 0.01
                    : (pixelRatio > 1.5)
                        ? dispWidth * 0.001
                        : dispWidth * 0.001),
          ],
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: <Widget>[
              Container(
                // 전등 Name 설정 Container...
                width: mobile ? dispWidth * 0.46 : dispWidth * 0.2,
                decoration: BoxDecoration(
                  // color: Colors.transparent, //Container 배경 색
                  borderRadius: BorderRadius.circular(
                      mobile ? dispWidth * 0.02 : dispWidth * borderRadius),
                  border: Border.all(
                      width: mobile
                          ? dispWidth * boardLine
                          : dispHeight * boardLine,
                      color: Colors.black), //Container 테두리 값, 색상
                ),
                child: Column(children: <Widget>[
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        cursorColor: Colors.white,
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            // height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[1],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[1] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[2],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[2] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[3],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[3] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[4],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[4] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        // obscureText: true,
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[5],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[5] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      bottom: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.ledName[6],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.ledName[6] = text;
                        },
                      ),
                    ),
                  ),
                  if (mobile == true)
                    const SizedBox(
                      height: 20,
                    ),
                  if (mobile == true)
                    Column(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: <Widget>[
                        Text(
                          '청수 센서 Type',
                          textAlign: TextAlign.right,
                          style: TextStyle(
                              color: Colors.black,
                              fontSize: (dispWidth * 0.045) / txtScale,
                              fontWeight: FontWeight.w600),
                        ),
                        RadioListTile(
                          activeColor: Colors.black,
                          title: Text(
                            '0 ~ 190 Ω',
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispWidth * 0.036) / txtScale,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.w800),
                          ),
                          value: CleanSensor.A,
                          groupValue:
                              V.cleanSensorType ? CleanSensor.A : CleanSensor.B,
                          onChanged: (value) /*async*/ {
                            if (beep) {
                              advancedPlayer
                                  .play(AssetSource('sound/iconClick.mp3'));
                            }
                            setState(() {
                              V.cleanSensorType = true;
                            });
                          },
                        ),
                        RadioListTile(
                          activeColor: Colors.black,
                          title: Text(
                            '240 ~ 33 Ω',
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispWidth * 0.036) / txtScale,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.w800),
                          ),
                          value: CleanSensor.B,
                          groupValue:
                              V.cleanSensorType ? CleanSensor.A : CleanSensor.B,
                          onChanged: (value) /*async*/ {
                            if (beep) {
                              advancedPlayer
                                  .play(AssetSource('sound/iconClick.mp3'));
                            }
                            setState(() {
                              V.cleanSensorType = false;
                            });
                          },
                        ),
                      ],
                    ),
                ]),
              ),
              Container(
                // 출력 Name 설정 Container...
                width: mobile ? dispWidth * 0.46 : dispWidth * 0.2,
                decoration: BoxDecoration(
                  // color: displayBackGroundColor, //Container 배경 색
                  borderRadius: BorderRadius.circular(
                      mobile ? dispWidth * 0.02 : dispWidth * borderRadius),
                  border: Border.all(
                      width: mobile
                          ? dispWidth * boardLine
                          : dispHeight * boardLine,
                      color: Colors.black), //C//Container 테두리 값, 색상
                ),
                child: Column(children: <Widget>[
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[1],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[1] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[2],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[2] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[3],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[3] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[4],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[4] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[5],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[5] = text;
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      left: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      top: mobile ? dispWidth * 0.03 : dispWidth * 0.02,
                      right: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                      bottom: mobile ? dispWidth * 0.02 : dispWidth * 0.02,
                    ),
                    child: SizedBox(
                      height: mobile ? dispHeight * 0.05 : dispWidth * 0.05,
                      child: TextField(
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.055) / txtScale
                                : (dispHeight * 0.04) / txtScale,
                            height: 0.8,
                            color: Colors.black),
                        decoration: InputDecoration(
                          focusedBorder: const OutlineInputBorder(
                            borderSide:
                                BorderSide(color: Colors.black, width: 1.5),
                          ),
                          border: const OutlineInputBorder(),
                          labelText: V.outName[6],
                          labelStyle: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                        onChanged: (text) {
                          V.outName[6] = text;
                        },
                      ),
                    ),
                  ),
                  if (mobile == true)
                    const SizedBox(
                      height: 20,
                    ),
                  if (mobile == true)
                    Column(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: <Widget>[
                        Text(
                          '오수 센서 Type',
                          textAlign: TextAlign.right,
                          style: TextStyle(
                              color: Colors.black,
                              fontSize: (dispWidth * 0.045) / txtScale,
                              fontWeight: FontWeight.w600),
                        ),
                        RadioListTile(
                          activeColor: Colors.black,
                          title: Text(
                            '0 ~ 190 Ω',
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispWidth * 0.036) / txtScale,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.w800),
                          ),
                          value: WasteSensor.A,
                          groupValue:
                              V.wasteSensorType ? WasteSensor.A : WasteSensor.B,
                          onChanged: (value) /*async*/ {
                            if (beep) {
                              advancedPlayer
                                  .play(AssetSource('sound/iconClick.mp3'));
                            }
                            setState(() {
                              V.wasteSensorType = true;
                            });
                          },
                        ),
                        RadioListTile(
                          activeColor: Colors.black,
                          title: Text(
                            '240 ~ 33 Ω',
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispWidth * 0.036) / txtScale,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.w800),
                          ),
                          value: WasteSensor.B,
                          groupValue:
                              V.wasteSensorType ? WasteSensor.A : WasteSensor.B,
                          onChanged: (value) /*async*/ {
                            if (beep) {
                              advancedPlayer
                                  .play(AssetSource('sound/iconClick.mp3'));
                            }
                            setState(() {
                              V.wasteSensorType = false;
                            });
                          },
                        ),
                      ],
                    ),
                ]),
              ),
              if (mobile == false)
                Column(
                  children: [
                    Container(
                      width: dispWidth * 0.23,
                      decoration: BoxDecoration(
                        // color: Colors.transparent, //Container 배경 색
                        borderRadius: BorderRadius.circular(mobile
                            ? dispWidth * 0.02
                            : dispWidth * borderRadius),
                        border: Border.all(
                            width: mobile
                                ? dispWidth * boardLine
                                : dispHeight * boardLine,
                            color: Colors.black), //Container 테두리 값, 색상
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: <Widget>[
                          Text(
                            '청수 센서 Type',
                            textAlign: TextAlign.right,
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispHeight * 0.035) / txtScale,
                                fontWeight: FontWeight.w600),
                          ),
                          RadioListTile(
                            activeColor: Colors.black,
                            title: Text(
                              '0 ~ 190 Ω',
                              style: TextStyle(
                                  color: Colors.black,
                                  fontSize: (dispHeight * 0.028) / txtScale,
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.w600),
                            ),
                            value: CleanSensor.A,
                            groupValue: V.cleanSensorType
                                ? CleanSensor.A
                                : CleanSensor.B,
                            onChanged: (value) /*async*/ {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              setState(() {
                                V.cleanSensorType = true;
                              });
                            },
                          ),
                          RadioListTile(
                            activeColor: Colors.black,
                            title: Text(
                              '240 ~ 33 Ω',
                              style: TextStyle(
                                  color: Colors.black,
                                  fontSize: (dispHeight * 0.028) / txtScale,
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.w600),
                            ),
                            value: CleanSensor.B,
                            groupValue: V.cleanSensorType
                                ? CleanSensor.A
                                : CleanSensor.B,
                            onChanged: (value) /*async*/ {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              setState(() {
                                V.cleanSensorType = false;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                    SizedBox(
                      height: dispHeight * 0.1,
                    ),
                    Container(
                      width: dispWidth * 0.23,
                      decoration: BoxDecoration(
                        // color: Colors.transparent, //Container 배경 색
                        borderRadius: BorderRadius.circular(mobile
                            ? dispWidth * 0.02
                            : dispWidth * borderRadius),
                        border: Border.all(
                            width: mobile
                                ? dispWidth * boardLine
                                : dispHeight * boardLine,
                            color: Colors.black), //Container 테두리 값, 색상
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: <Widget>[
                          Text(
                            '오수 센서 Type',
                            textAlign: TextAlign.right,
                            style: TextStyle(
                                color: Colors.black,
                                fontSize: (dispHeight * 0.035) / txtScale,
                                fontWeight: FontWeight.w600),
                          ),
                          RadioListTile(
                            activeColor: Colors.black,
                            title: Text(
                              '0 ~ 190 Ω',
                              style: TextStyle(
                                  color: Colors.black,
                                  fontSize: (dispHeight * 0.028) / txtScale,
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.w600),
                            ),
                            value: WasteSensor.A,
                            groupValue: V.wasteSensorType
                                ? WasteSensor.A
                                : WasteSensor.B,
                            onChanged: (value) /*async*/ {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              setState(() {
                                V.wasteSensorType = true;
                              });
                            },
                          ),
                          RadioListTile(
                            activeColor: Colors.black,
                            title: Text(
                              '240 ~ 33 Ω',
                              style: TextStyle(
                                  color: Colors.black,
                                  fontSize: (dispHeight * 0.028) / txtScale,
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.w600),
                            ),
                            value: WasteSensor.B,
                            groupValue: V.wasteSensorType
                                ? WasteSensor.A
                                : WasteSensor.B,
                            onChanged: (value) /*async*/ {
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/iconClick.mp3'));
                              }
                              setState(() {
                                V.wasteSensorType = false;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class AppBarScreen extends StatefulWidget {
  const AppBarScreen({Key? key}) : super(key: key);

  @override
  State<AppBarScreen> createState() => _AppBarScreenState();
}

class _AppBarScreenState extends State<AppBarScreen> {
  @override
  Widget build(BuildContext context) {
    return AppBar(
      // automaticallyImplyLeading: true,
      backgroundColor: appBarColor,
      title: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          logoFlag // true 면 logo 삽입...
              ? SizedBox(
                  width: mobile ? dispWidth * 0.08 : dispWidth * 0.04, // 고정...
                  height: mobile ? 30 : dispWidth * 0.035, // 고정...
                  child: Image.asset(
                    'assets/images/camperVan.png',
                    color: titleColor,
                  ),
                )
              : const SizedBox.shrink(),
          InkWell(
            onTap: () async {
              setState(() {});
            },
            onLongPress: () async {
              SharedPreferences prefs = await SharedPreferences.getInstance();
              displayDir = !displayDir;
              prefs.setBool('displayDir', displayDir);
            },
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                SizedBox(
                  height: mobile ? dispHeight * 0.015 : dispHeight * 0.0,
                ),
                SizedBox(
                  // width: mobile ? 85.0 : dispHeight * 0.26,
                  // height: mobile ? 30.0 : dispHeight * 0.045,
                  width: mobile ? dispWidth * 0.265 : dispWidth * 0.26,
                  height: mobile ? dispHeight * 0.04 : dispHeight * 0.045,
                  child: Text(
                    logoFlag ? logoText : 'CamTrol V3.5',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontStyle: FontStyle.italic,
                      fontSize: mobile
                          ? (dispHeight * 0.02) / txtScale
                          : (dispHeight * 0.04) / txtScale,
                      color: titleColor,
                      // color: Color(0xff3b3b3b),
                      // fontSize: 20.0 * V.textScaleRatio,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      actions: <Widget>[
        mobile
            ? const SizedBox.shrink()
            : DigitalClock(
                areaDecoration: const BoxDecoration(color: Colors.transparent),
                is24HourTimeFormat: false,
                // digitAnimationStyle: Curves.linearToEaseOut,
                // digitAnimationStyle: Curves.fastOutSlowIn,
                digitAnimationStyle: Curves.fastLinearToSlowEaseIn,
                areaAligment: AlignmentDirectional.center,
                minuteDigitDecoration:
                    const BoxDecoration(color: Colors.transparent),
                hourMinuteDigitTextStyle:
                    TextStyle(fontSize: dispHeight * 0.045),
                secondDigitDecoration:
                    const BoxDecoration(color: Colors.transparent),
                secondDigitTextStyle: TextStyle(fontSize: dispHeight * 0.025),
                amPmDigitTextStyle: TextStyle(
                    fontSize: dispHeight * 0.025,
                    color: Colors.white,
                    fontWeight: FontWeight.bold),
              ),
        mobile ? const SizedBox.shrink() : SizedBox(width: dispWidth * 0.03),
        // mobile
        //     ? SizedBox.shrink()
        //     : IconButton(
        //         icon: Icon(Icons.menu_book, size: dispHeight * 0.05),
        //         tooltip: '설명서',
        //         onPressed: () async {
        //           if (beep) audioCache.play('sound/iconClick.mp3');
        //         },
        //       ),
        // SizedBox(
        //     width: mobile
        //         ? (pixelRatio > 1.5)
        //             ? dispWidth * 0.0015
        //             : dispWidth * 0.03
        //         : (pixelRatio > 1.5)
        //             ? dispWidth * 0.015
        //             : dispWidth * 0.03),
        IconButton(
          icon: Icon(Icons.hotel,
              size: mobile ? dispWidth * 0.06 : dispHeight * 0.05,
              color: sleepFlag ? Colors.black : Colors.white),
          tooltip: '취침모드',
          onPressed: () async {
            if (beep) advancedPlayer.play(AssetSource('sound/iconClick.mp3'));
            if (mobile == true) {
              if (sleepFlag == false) {
                await server.getReq("sleep", 1);
              } else {
                await server.getReq("sleep", 0);
              }
            } else {
              sleepFlagReset = true;
              await server.getReq("sleep", 1);
            }
          },
        ),
        SizedBox(
            width: mobile
                ? (pixelRatio > 1.5)
                    ? dispWidth * 0.0015
                    : dispWidth * 0.03
                : (pixelRatio > 1.5)
                    ? dispWidth * 0.015
                    : dispWidth * 0.03),
        IconButton(
          icon: (V.wiFiType)
              ? netFlag
                  ? Icon(Icons.wifi,
                      size: mobile ? dispWidth * 0.06 : dispHeight * 0.05)
                  : Icon(Icons.wifi_off,
                      size: mobile ? dispWidth * 0.06 : dispHeight * 0.05)
              : netFlag
                  ? Icon(Icons.wifi_tethering,
                      size: mobile ? dispWidth * 0.06 : dispHeight * 0.05)
                  : Icon(Icons.wifi_tethering_off,
                      size: mobile ? dispWidth * 0.06 : dispHeight * 0.05),
          tooltip: 'WiFi',
          onPressed: () async {
            if (beep) advancedPlayer.play(AssetSource('sound/iconClick.mp3'));
            // V.comFlag = false;
            // server.getReq("wifiSend", 0); // ssid, password 읽어오기..
            if (serialDebug) {
              await Get.toNamed('/wifichange');
            }
            // V.comFlag = true;
          },
        ),
        SizedBox(
            width: mobile
                ? (pixelRatio > 1.5)
                    ? dispWidth * 0.0015
                    : dispWidth * 0.03
                : (pixelRatio > 1.5)
                    ? dispWidth * 0.015
                    : dispWidth * 0.03),
        IconButton(
          icon: Icon(Icons.change_circle_outlined,
              size: mobile ? dispWidth * 0.06 : dispHeight * 0.05),
          tooltip: '설정',
          onPressed: () async {
            if (beep) advancedPlayer.play(AssetSource('sound/iconClick.mp3'));
            await Get.toNamed("/setting");
          },
        ),
        SizedBox(
            width: mobile
                ? (pixelRatio > 1.5)
                    ? dispWidth * 0.0015
                    : dispWidth * 0.03
                : (pixelRatio > 1.5)
                    ? dispWidth * 0.001
                    : dispWidth * 0.03),
        IconButton(
          icon: colorFlag
              ? Icon(Icons.nightlight_round_outlined,
                  size: mobile ? dispWidth * 0.06 : dispHeight * 0.05)
              : Icon(Icons.light_mode,
                  size: mobile ? dispWidth * 0.06 : dispHeight * 0.05),
          tooltip: '컬러 변경',
          onPressed: () async {
            SharedPreferences prefs = await SharedPreferences.getInstance();
            if (beep) advancedPlayer.play(AssetSource('sound/intro.mp3'));
            colorFlag = !colorFlag;
            prefs.setBool('colorFlag', colorFlag);
            if (colorFlag) {
              portraitBackColor = const Color.fromARGB(255, 72, 72, 72);
            } else {
              portraitBackColor = const Color.fromARGB(255, 58, 49, 158);
              // portraitBackColor = Color.fromARGB(255, 108, 108, 108);
            }
            setState(() {});
          },
        ),
      ],
    );
  }
}

class PortScreen extends StatefulWidget {
  const PortScreen({Key? key}) : super(key: key);
  @override
  State<PortScreen> createState() => _PortScreenState();
}

class _PortScreenState extends State<PortScreen> {
  @override
  Widget build(BuildContext context) {
    return Container(
      // color: Color(0xff333333),
      color: portraitBackColor,
      child: Scaffold(
        // Portrait 디자인...
        backgroundColor: Colors.transparent,
        appBar: PreferredSize(
          preferredSize: Size.fromHeight((dispHeight * appBarHeight) * 0.65),
          child: const AppBarScreen(), // 공통으로 적용...
        ),
        body: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              // Appbar와의 상하간격 늘림...
              SizedBox(
                height: dispHeight * 0.003,
              ),
              Container(
                // Display 창...
                height: dispHeight * 0.18, //Container 높이 기존 : 150
                decoration: BoxDecoration(
                  borderRadius:
                      BorderRadius.circular(dispHeight * borderRadius),
                  border: Border.all(
                      width: dispHeight * boardLine,
                      color: Colors.white54), //Container 테두리 값, 색상
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: <Widget>[
                    SizedBox(
                      // Battery Icon 및 전압 표시...
                      width: dispWidth * 0.17, //Battery Icon 높이 기존 : 100
                      height: dispHeight * 0.1,

                      // width: dispWidth * 0.12,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: <Widget>[
                          InkWell(
                            onTap: () {
                              ++V.voltCount;
                              // 시동 battery, Solar 가 결선 되어 있을 때 표시...
                              if (V.voltCount == 2 && !V.carVoltFlag) {
                                ++V.voltCount;
                              }
                              if (V.voltCount == 3 && !V.solarVoltFlag) {
                                ++V.voltCount;
                              }
                              if (beep) {
                                advancedPlayer
                                    .play(AssetSource('sound/dongdong.mp3'));
                              }
                            },
                            child: Container(
                              width: dispWidth * 0.13, //Battery Icon 폭...
                              height: dispHeight * 0.05, //Battery Icon 높이...
                              decoration: BoxDecoration(
                                image: DecorationImage(
                                  image: AssetImage(voltPng),
                                  colorFilter: ColorFilter.mode(
                                      // batColor, BlendMode.srcIn),
                                      netFlag
                                          ? Colors.white
                                          : const Color(0xff808080),
                                      BlendMode.srcIn),
                                  fit: BoxFit.fill,
                                ),
                              ),
                            ),
                            onLongPress: () {},
                          ),
                          Text(
                            // '${(V.btVolt).toString()} V',
                            netFlag ? voltText : '--.- V',
                            textAlign: TextAlign.right,
                            style: TextStyle(
                              fontWeight: FontWeight.w900,
                              fontSize: (dispWidth * 0.045) /
                                  txtScale, //Battery 전압 Size 기존 : 38
                              fontStyle: FontStyle.italic,
                              // color: netFlag ? batColor : Color(0xff808080)),
                              color: netFlag
                                  ? Colors.white
                                  : const Color(0xff808080),
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(
                      // 온도계, 온도표시, 습도계, 습도표시를 담고 있음...
                      width: dispWidth * 0.3,
                      height: dispHeight * 0.14,

                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: <Widget>[
                          Row(
                            // 온도계와 온도 표시 Row...
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: [
                              Container(
                                // width: 30.0, //Temp Icon 폭
                                // height: 30.0, //Temp Icon 높이 기존 : 100
                                width: dispWidth * 0.1, //Temp Icon 폭
                                height: dispHeight *
                                    0.045, //humidity Icon 높이 기존 : 100
                                decoration: BoxDecoration(
                                  image: DecorationImage(
                                    // image: AssetImage('assets/images/temp.png'),
                                    image: AssetImage(tempPng),
                                    colorFilter: ColorFilter.mode(
                                        // mainIconColor, BlendMode.srcIn),
                                        netFlag
                                            ? Colors.white
                                            : const Color(0xff808080),
                                        BlendMode.srcIn),
                                    fit: BoxFit.fill,
                                  ),
                                ),
                              ),
                              Text(
                                // '${V.temperature.toString()} ℃ ',
                                netFlag ? tempText : '--.- ℃',
                                textAlign: TextAlign.right,
                                style: TextStyle(
                                  //                              fontFamily: 'Karma',
                                  fontWeight: FontWeight.w900,
                                  // fontSize: 18.0, //Battery 전압 Size 기존 : 38
                                  fontSize: (dispWidth * 0.045) /
                                      txtScale, //Battery 전압 Size 기존 : 38
                                  fontStyle: FontStyle.italic,
                                  // color: mainFontColor),
                                  color: netFlag
                                      ? Colors.white
                                      : const Color(0xff808080),
                                ),
                              ),
                            ],
                          ),
                          // InvertorProcess(),
                          Row(
                            // 습도계와 습도 표시 Row...
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: [
                              Container(
                                width: dispWidth * 0.1, //humidity Icon 폭
                                height: dispHeight *
                                    0.045, //humidity Icon 높이 기존 : 100
                                decoration: BoxDecoration(
                                  image: DecorationImage(
                                    image: const AssetImage(
                                        'assets/images/humidity.png'),
                                    colorFilter: ColorFilter.mode(
                                        netFlag
                                            ? Colors.white
                                            : const Color(0xff808080),
                                        BlendMode.srcIn),
                                    fit: BoxFit.fill,
                                  ),
                                ),
                              ),
                              Text(
                                netFlag
                                    ? '${V.humidity.toString()} %  '
                                    : '--.- %  ',
                                textAlign: TextAlign.right,
                                style: TextStyle(
                                  fontWeight: FontWeight.w900,
                                  fontSize: (dispWidth * 0.045) /
                                      txtScale, //Battery 전압 Size 기존 : 38
                                  fontStyle: FontStyle.italic,
                                  color: netFlag
                                      ? Colors.white
                                      : const Color(0xff808080),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    !serialDebug
                        ?
                        // InvertorProcess()
                        Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: <Widget>[
                              InkWell(
                                child: CircularPercentIndicator(
                                  radius: dispWidth * 0.2,
                                  lineWidth: dispWidth * 0.035,
                                  percent: netFlag ? V.cleanWater / 100.0 : 0.0,
                                  arcBackgroundColor: cleanBackColor,
                                  arcType: ArcType.FULL,
                                  center: Text(
                                    V.cleanSensor
                                        ? netFlag
                                            ? "${V.cleanWater.toString()}%"
                                            : "---"
                                        : "---",
                                    style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispWidth * 0.035) / txtScale,
                                      color: V.cleanSensor
                                          ? mainFontColor
                                          : const Color(0xff808080),
                                    ),
                                  ),
                                  circularStrokeCap: CircularStrokeCap.round,
                                  backgroundColor: Colors.transparent,
                                  progressColor: cleanBarColor,
                                ),
                              ),
                              Text(
                                '청수',
                                style: TextStyle(
                                  fontWeight: FontWeight.w900,
                                  fontSize: (dispWidth * 0.04) / txtScale,
                                  // color: mainFontColor),
                                  color: V.cleanSensor
                                      ? mainFontColor
                                      : const Color(0xff808080),
                                ),
                              )
                            ],
                          )
                        : Column(
                            // A Type (0~190) Sensor teaching mode 진입...
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              Text(
                                // cleanAdc.toString(),
                                aHighValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor High 값 전송...
                                onPressed: () {
                                  aHighValue = cleanAdc;
                                  server.getReq("aHighValue", aHighValue);
                                },
                                child: Text(
                                  "A High 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispWidth * 0.02) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                cleanAdc.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor Low 값 전송...
                                onPressed: () {
                                  aLowValue = cleanAdc;
                                  server.getReq("aLowValue", aLowValue);
                                },
                                child: Text(
                                  "A Low 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispWidth * 0.02) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                aLowValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                            ],
                          ),
                    !serialDebug
                        ?
                        // AllLedProcess()
                        Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: <Widget>[
                              CircularPercentIndicator(
                                radius: dispWidth * 0.2,
                                lineWidth: dispWidth * 0.035,
                                percent: netFlag ? V.wasteWater / 100.0 : 0.0,
                                arcBackgroundColor: wasteBackColor,
                                arcType: ArcType.FULL,
                                center: Text(
                                  V.wasteSensor
                                      ? netFlag
                                          ? "${V.wasteWater.toString()}%"
                                          : "---"
                                      : "---",
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.035) / txtScale,
                                    color: V.wasteSensor
                                        ? mainFontColor
                                        : const Color(0xff808080),
                                  ),
                                ),
                                circularStrokeCap: CircularStrokeCap.round,
                                backgroundColor: Colors.transparent,
                                progressColor: wasteBarColor,
                              ),
                              Text(
                                '오수',
                                style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: (dispWidth * 0.04) / txtScale,
                                    color: V.wasteSensor
                                        ? mainFontColor
                                        : const Color(0xff808080)),
                              )
                            ],
                          )
                        : Column(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              Text(
                                // cleanAdc.toString(),
                                bHighValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // B type Sensor High 값 전송...
                                onPressed: () {
                                  bHighValue = wasteAdc;
                                  server.getReq("bHighValue", bHighValue);
                                },
                                child: Text(
                                  "B High 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispWidth * 0.02) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                wasteAdc.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // B type Sensor Low 값 전송...
                                onPressed: () {
                                  bLowValue = wasteAdc;
                                  server.getReq("bLowValue", bLowValue);
                                },
                                child: Text(
                                  "B Low 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispWidth * 0.02) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                bLowValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispWidth * 0.02) / txtScale,
                                    color: mainFontColor),
                              ),
                            ],
                          ),
                  ],
                ),
              ),
              // display 창과의 간격 늘림...
              SizedBox(
                height: dispHeight * 0.008,
              ),
              Column(
                children: <Widget>[
                  Container(
                    // margin: const EdgeInsets.symmetric(vertical: 5.0),
                    height: dispHeight * 0.10,
                    decoration: BoxDecoration(
                        // color: outBackColor,
                        // color: Colors.white,
                        borderRadius:
                            BorderRadius.circular(dispHeight * borderRadius),
                        border: Border.all(
                            width: dispHeight * boardLine,
                            color: Colors.white54)),
                    // border: Border.all(width: 2, color: outBoardColor)),
                    child: const Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      // ignore: prefer_const_literals_to_create_immutables
                      children: <Widget>[
                        AllLedProcess(),
                        InvertorProcess(),
                        OutProcess(5),
                        OutProcess(6),
                      ],
                    ),
                  ),
                ],
              ),
              SizedBox(
                height: dispHeight * 0.008,
              ),
              // LED 출력용 Container..
              Container(
                // Button 및 Slide Bar 표시...
                // margin: const EdgeInsets.symmetric(vertical: 2.0),
                height: dispHeight * 0.50,
                decoration: BoxDecoration(
                    // color: ledBackColor,
                    borderRadius:
                        BorderRadius.circular(dispHeight * borderRadius),
                    border: Border.all(
                        width: dispHeight * boardLine, color: Colors.white54)),
                // border: Border.all(width: 2, color: ledBoarColor)),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: <Widget>[
                    LedProcess(1),
                    LedProcess(2),
                    LedProcess(3),
                    LedProcess(4),
                    LedProcess(5),
                    LedProcess(6),
                    // LedProcess(6),
                  ],
                ),
              ),
              SizedBox(
                height: dispHeight * 0.008,
              ),
//            LowerDisplay(),
              Column(
                children: <Widget>[
                  Container(
                    // margin: const EdgeInsets.symmetric(vertical: 5.0),
                    height: dispHeight * 0.10,
                    decoration: BoxDecoration(
                        // color: outBackColor,
                        // color: Colors.white,
                        borderRadius:
                            BorderRadius.circular(dispHeight * borderRadius),
                        border: Border.all(
                            width: dispHeight * boardLine,
                            color: Colors.white54)),
                    // border: Border.all(width: 2, color: outBoardColor)),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      // ignore: prefer_const_literals_to_create_immutables
                      children: <Widget>[
                        InkWell(
                          onTap: () {
                            V.outStatus[1] = false;
                            server.getReq("OUT", 1);
                            V.outStatus[2] = false;
                            server.getReq("OUT", 2);
                          },
                          child: SizedBox(
                            width: mobile
                                ? dispWidth * 0.09
                                : dispWidth * 0.05, // 고정...
                            height: dispHeight * 0.15, // 고정...
                            child: Image.asset(
                              V.outStatus[1]
                                  ? 'assets/images/PopUp.png'
                                  : 'assets/images/PopDown.png',
                              color: V.outStatus[1]
                                  ? Colors.amber
                                  // : Color(0xff808080),
                                  : Colors.white54,
                            ),
                          ),
                        ),
                        const PopUpProcess(),
                        InkWell(
                          onTap: () {
                            V.outStatus[3] = false;
                            server.getReq("OUT", 3);
                            V.outStatus[4] = false;
                            server.getReq("OUT", 4);
                          },
                          child: SizedBox(
                            width: mobile
                                ? dispWidth * 0.1
                                : dispWidth * 0.05, // 고정...
                            height: dispHeight * 0.15, // 고정...
                            child: Image.asset(
                              V.outStatus[3]
                                  ? 'assets/images/MicroWaveUp.png'
                                  : 'assets/images/MicroWaveDown.png',
                              color: V.outStatus[3]
                                  ? Colors.amber
                                  : const Color(0xff808080),
                            ),
                          ),
                        ),
                        const MicroWaveProcess(),
                        // OutProcess(5),
                        // OutProcess(6),
                      ],
                    ),
                  ),
                ],
              ),
              // 명령 표시 창
              // Container(
              //   alignment: Alignment.centerLeft,
              //   margin: const EdgeInsets.symmetric(vertical: 2.0),
              //   // width: 250,
              //   height: 50,
              //   decoration: BoxDecoration(
              //     // color: messageBackColor, //Container 배경 색
              //     borderRadius: BorderRadius.circular(7),
              //     border: Border.all(
              //         // width: 2, color: Color(0xff22FFEE)), //Container 테두리 값, 색상
              //         width: 2,
              //         color: Colors.white), //Container 테두리 값, 색상
              //     // width: 2, color: messageBoardColor), //Container 테두리 값, 색상
              //   ),
              //   child: Padding(
              //     padding: const EdgeInsets.all(5.0),
              //     child: Column(
              //       children: <Widget>[
              //         Text(
              //           V.monitor,
              //           style: const TextStyle(
              //               color: messageFontColor,
              //               fontWeight: FontWeight.bold,
              //               fontStyle: FontStyle.italic,
              //               fontSize: 17),
              //         ),
              //       ],
              //     ),
              //   ),
              // ),
              SizedBox(
                height: dispHeight * 0.1,
              ),
              InkWell(
                onTap: () {
                  V.isPhoneTable[1]
                      ? launch("tel://${V.phoneNumber[1]}")
                      : null;
                },
                onLongPress: () async {
                  V.comFlag = false;
                  await Get.toNamed("/phoneNumber");
                  V.comFlag = true;
                },
                child: Container(
                  alignment: Alignment.center,
                  height: dispHeight * 0.05,
                  child: Column(
                    children: <Widget>[
                      V.isPhoneTable[1]
                          ? Text(
                              "${V.phoneName[1]} :  ${V.phoneNumber[1]}",
                              style: TextStyle(
                                color: Colors.yellow,
                                fontWeight: FontWeight.bold,
                                fontStyle: FontStyle.italic,
                                fontSize: mobile
                                    ? (dispHeight * 0.03) / txtScale
                                    : (dispWidth * 0.03) / txtScale,
                              ),
                            )
                          : Text(
                              '긴급 연락처 등록',
                              style: TextStyle(
                                color: Colors.yellow,
                                fontWeight: FontWeight.bold,
                                fontStyle: FontStyle.italic,
                                fontSize: mobile
                                    ? (dispHeight * 0.03) / txtScale
                                    : (dispWidth * 0.03) / txtScale,
                              ),
                            ),
                    ],
                  ),
                ),
              ),
              V.isPhoneTable[2]
                  ? InkWell(
                      onTap: () {
                        // launch("tel://01044885977");
                        launch("tel://${V.phoneNumber[2]}");
                      },
                      onLongPress: () async {
                        await Get.toNamed("/phoneNumber");
                      },
                      child: Container(
                        alignment: Alignment.center,
                        margin: const EdgeInsets.symmetric(vertical: 2.0),
                        // width: 250,
                        // height: 40,
                        // decoration: BoxDecoration(
                        //   // color: messageBackColor, //Container 배경 색
                        //   borderRadius: BorderRadius.circular(7),
                        //   border: Border.all(
                        //       // width: 2, color: Color(0xff22FFEE)), //Container 테두리 값, 색상
                        //       width: 2,
                        //       color: Colors.white), //Container 테두리 값, 색상
                        //   // width: 2, color: messageBoardColor), //Container 테두리 값, 색상
                        // ),
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: <Widget>[
                              Text(
                                "${V.phoneName[2]} :  ${V.phoneNumber[2]}",
                                style: TextStyle(
                                  color: Colors.yellow,
                                  fontWeight: FontWeight.bold,
                                  fontStyle: FontStyle.italic,
                                  fontSize: mobile
                                      ? (dispHeight * 0.03) / txtScale
                                      : (dispWidth * 0.03) / txtScale,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                    )
                  : const SizedBox.shrink(),
              V.isPhoneTable[3]
                  ? InkWell(
                      onTap: () {
                        // launch("tel://01044885977");
                        launch("tel://${V.phoneNumber[3]}");
                      },
                      onLongPress: () async {
                        await Get.toNamed("/phoneNumber");
                      },
                      child: Container(
                        alignment: Alignment.center,
                        margin: const EdgeInsets.symmetric(vertical: 2.0),
                        // width: 250,
                        // height: 40,
                        // decoration: BoxDecoration(
                        //   // color: messageBackColor, //Container 배경 색
                        //   borderRadius: BorderRadius.circular(7),
                        //   border: Border.all(
                        //       // width: 2, color: Color(0xff22FFEE)), //Container 테두리 값, 색상
                        //       width: 2,
                        //       color: Colors.white), //Container 테두리 값, 색상
                        //   // width: 2, color: messageBoardColor), //Container 테두리 값, 색상
                        // ),
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: <Widget>[
                              Text(
                                "${V.phoneName[3]} :  ${V.phoneNumber[3]}",
                                style: TextStyle(
                                  color: Colors.yellow,
                                  fontWeight: FontWeight.bold,
                                  fontStyle: FontStyle.italic,
                                  fontSize: mobile
                                      ? (dispHeight * 0.03) / txtScale
                                      : (dispWidth * 0.03) / txtScale,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                    )
                  : const SizedBox.shrink(),
              V.isPhoneTable[4]
                  ? InkWell(
                      onTap: () {
                        // launch("tel://01044885977");
                        launch("tel://${V.phoneNumber[4]}");
                      },
                      onLongPress: () async {
                        await Get.toNamed("/phoneNumber");
                      },
                      child: Container(
                        alignment: Alignment.center,
                        margin: const EdgeInsets.symmetric(vertical: 2.0),
                        // width: 250,
                        // height: 40,
                        // decoration: BoxDecoration(
                        //   // color: messageBackColor, //Container 배경 색
                        //   borderRadius: BorderRadius.circular(7),
                        //   border: Border.all(
                        //       // width: 2, color: Color(0xff22FFEE)), //Container 테두리 값, 색상
                        //       width: 2,
                        //       color: Colors.white), //Container 테두리 값, 색상
                        //   // width: 2, color: messageBoardColor), //Container 테두리 값, 색상
                        // ),
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: <Widget>[
                              Text(
                                "${V.phoneName[4]} :  ${V.phoneNumber[4]}",
                                style: TextStyle(
                                  color: Colors.yellow,
                                  fontWeight: FontWeight.bold,
                                  fontStyle: FontStyle.italic,
                                  fontSize: mobile
                                      ? (dispHeight * 0.03) / txtScale
                                      : (dispWidth * 0.03) / txtScale,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                    )
                  : const SizedBox.shrink(),
              V.isPhoneTable[5]
                  ? InkWell(
                      onTap: () {
                        // launch("tel://01044885977");
                        launch("tel://${V.phoneNumber[5]}");
                      },
                      onLongPress: () async {
                        await Get.toNamed("/phoneNumber");
                      },
                      child: Container(
                        alignment: Alignment.center,
                        margin: const EdgeInsets.symmetric(vertical: 2.0),
                        // width: 250,
                        // height: 40,
                        // decoration: BoxDecoration(
                        //   // color: messageBackColor, //Container 배경 색
                        //   borderRadius: BorderRadius.circular(7),
                        //   border: Border.all(
                        //       // width: 2, color: Color(0xff22FFEE)), //Container 테두리 값, 색상
                        //       width: 2,
                        //       color: Colors.white), //Container 테두리 값, 색상
                        //   // width: 2, color: messageBoardColor), //Container 테두리 값, 색상
                        // ),
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: <Widget>[
                              Text(
                                "${V.phoneName[5]} :  ${V.phoneNumber[5]}",
                                style: TextStyle(
                                  color: Colors.yellow,
                                  fontWeight: FontWeight.bold,
                                  fontStyle: FontStyle.italic,
                                  fontSize: mobile
                                      ? (dispHeight * 0.03) / txtScale
                                      : (dispWidth * 0.03) / txtScale,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                    )
                  : const SizedBox.shrink(),
            ],
          ),
        ),
      ),
    );
  }
}

class PumpProcess extends StatefulWidget {
  final int spCh;

  const PumpProcess({Key? key, required this.spCh}) : super(key: key);

  @override
  _PumpProcessState createState() => _PumpProcessState();
}

class _PumpProcessState extends State<PumpProcess> {
  // final int spCh;
  // _PumpProcessState(this.spCh);

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: <Widget>[
        mobile
            ? SizedBox(
                // Text Box...
                width: mobile ? dispWidth * 0.08 : dispWidth * 0.05,
                child: Text(
                  '${(V.spValue[widget.spCh]).round()}',
                  textAlign: TextAlign.right,
                  style: TextStyle(
                      color: V.spStatus[widget.spCh]
                          ? slideFontColor
                          : Colors.black54,
                      fontSize: mobile
                          ? (dispWidth * 0.04) / txtScale
                          : (dispWidth * 0.023) / txtScale,
                      fontStyle: FontStyle.italic,
                      fontWeight: FontWeight.w800),
                ),
              )
            : const SizedBox.shrink(),
        SizedBox(
          // Slider Box...
          // width: mobile ? sliderWidth : 190.0,
          width: mobile ? dispWidth * 0.7 : dispWidth * 0.267, // Slide 길이...
          height: mobile ? dispHeight * 0.06 : dispHeight * 0.08,
          child: SliderTheme(
            data: SliderTheme.of(context).copyWith(
              // activeTrackColor: Colors.red[700],
              // inactiveTrackColor: Colors.red[100],
              // trackShape: RectangularSliderTrackShape(),
              trackHeight: mobile ? dispHeight * 0.004 : dispHeight * 0.008,
              thumbColor: Colors.redAccent,
              thumbShape: RoundSliderThumbShape(
                  enabledThumbRadius:
                      mobile ? dispWidth * 0.022 : dispWidth * 0.012),
              overlayColor: Colors.red.withAlpha(32),
              overlayShape: const RoundSliderOverlayShape(overlayRadius: 28.0),
            ),
            child: Slider(
              min: 10.0,
              max: 100.0,
              inactiveColor: const Color(0xff00ABA8),
              // activeColor: mobile ? portraitSlideColor : landscapeSlideColor,
              activeColor: portraitSlideColor,
              value: V.spValue[widget.spCh],
              onChanged: V.spStatus[widget.spCh]
                  ? (value) => setState(() {
                        // V.comFlag = false;
                        V.spValue[widget.spCh] = value;
                        // if (mobile) {
                        //   V.monitor =
                        //       '${V.ledName[spCh]} 밝기 값  ${V.ledValue[1].round()}';
                        // }
                        // print('${V.ledName[ledCh]} Slider Value : '
                        //     '${(V.ledValue[ledCh]).round()}..');
                      })
                  : null,
              onChangeEnd: (double newValue) {
                // V.comFlag = true;
                if (widget.spCh == 3) {
                  server.getReq("sp3", widget.spCh);
                } else if (widget.spCh == 4) {
                  server.getReq("sp4", widget.spCh);
                }
              },
              label: (V.spValue[widget.spCh]).round().toInt().toString(),
            ),
          ),
        ),
        // PortraitLedProcess(1),
        InkWell(
          child: Container(
            decoration: BoxDecoration(
              color: V.spStatus[widget.spCh] ? ledOnColor : ledOffColor,
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 1.5)
                  : dispWidth * buttonRadius),
              boxShadow: [
                BoxShadow(
                    // color: Colors.white,
                    color:
                        V.spStatus[widget.spCh] ? Colors.white : Colors.black38,
                    offset: const Offset(-3.0, -3.0),
                    // offset: mobile
                    //     ? const Offset(-3.0, -3.0)
                    //     : const Offset(-3.0, -3.0),
                    blurRadius: 5.0,
                    spreadRadius: 1.0),
                BoxShadow(
                    // color: Colors.black,
                    color:
                        V.spStatus[widget.spCh] ? Colors.white : Colors.black,
                    offset: const Offset(2.0, 2.0),
                    // offset: mobile
                    //     ? const Offset(3.0, 3.0)
                    //     : const Offset(2.0, 2.0),
                    blurRadius: 5.0,
                    spreadRadius: 1.0),
              ],
            ),
            width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
            height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: <Widget>[
                Text(V.spName[widget.spCh],
                    style: TextStyle(
                        color: V.spStatus[widget.spCh]
                            ? Colors.white
                            : Colors.black,
                        fontSize: mobile
                            ? (dispWidth * 0.036) / txtScale
                            : (dispWidth * 0.018) / txtScale,
                        fontWeight: FontWeight.w800)),
              ],
            ),
          ),
          onTap: () {
            // V.comFlag = false;
            setState(() {
              // V.comFlag = true;
              V.spStatus[widget.spCh]
                  ? V.spStatus[widget.spCh] = false
                  : V.spStatus[widget.spCh] = true;
              if (widget.spCh == 3) {
                server.getReq("sp3", widget.spCh);
              } else {
                server.getReq("sp4", widget.spCh);
              }
              // V.comFlag = false;
              if (V.spStatus[widget.spCh] == true) {
                // V.monitor = '${V.ledName[ledCh]} On..';
                if (beep) {
                  advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
                }
              } else {
                // V.monitor = '${V.ledName[ledCh]} Off..';
                if (beep) {
                  advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
                }
              }
              print('_isChecked_led[ledCh] : ${V.spStatus[widget.spCh]}');
              // V.comFlag = true;
              //  server.getReq("LED", ledCh);
            });
          },
          onLongPress: () {},
        ),
        SizedBox(
          width: dispWidth * 0.03,
        )
      ],
    );
  }
}

// ignore: must_be_immutable
class LedProcess extends StatefulWidget {
  // ignore: prefer_typing_uninitialized_variables
  var ledCh;
  LedProcess(this.ledCh, {Key? key}) : super(key: key);

  @override
  // ignore: no_logic_in_create_state, library_private_types_in_public_api
  _LedProcessState createState() => _LedProcessState(ledCh);
}

class _LedProcessState extends State<LedProcess> {
  final int ledCh;
  _LedProcessState(this.ledCh);

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: (ledCh == 0)
          ? <Widget>[
              SizedBox(
                width: mobile ? dispWidth * 0.08 : dispWidth * 0.05,
                child: Text(
                  '${(V.ledValue[ledCh]).round()}',
                  textAlign: TextAlign.right,
                  style: TextStyle(
                      color: V.ledStatus[ledCh]
                          ? Colors.amber
                          : const Color(0xff808080),
                      fontSize: mobile
                          ? (dispWidth * 0.04) / txtScale
                          : (dispWidth * 0.023) / txtScale,
                      fontStyle: FontStyle.italic,
                      fontWeight: FontWeight.w800),
                ),
              ),
            ]
          : <Widget>[
              SizedBox(
                // width: sliderValueTextWidth,
                width: mobile ? dispWidth * 0.08 : dispWidth * 0.05,
                child: Text(
                  '${(V.ledValue[ledCh]).round()}',
                  textAlign: TextAlign.right,
                  style: TextStyle(
                      color: V.ledStatus[ledCh]
                          ? Colors.amber
                          : const Color(0xff808080),
                      // fontSize: sliderValueFontSize * V.textScaleRatio,
                      fontSize: mobile
                          ? (dispWidth * 0.04) / txtScale
                          : (dispWidth * 0.023) / txtScale,
                      fontStyle: FontStyle.italic,
                      fontWeight: FontWeight.w800),
                ),
              ),
              SizedBox(
                // Slider 길이
                width: mobile ? dispWidth * 0.7 : dispWidth * 0.4,
                height: mobile ? dispHeight * 0.06 : dispHeight * 0.08,
                child: SliderTheme(
                  data: SliderTheme.of(context).copyWith(
                    trackHeight:
                        mobile ? dispHeight * 0.004 : dispHeight * 0.008,
                    thumbColor: Colors.redAccent,
                    thumbShape: RoundSliderThumbShape(
                        enabledThumbRadius:
                            mobile ? dispWidth * 0.022 : dispWidth * 0.012),
                    overlayColor: Colors.red.withAlpha(32),
                    overlayShape:
                        const RoundSliderOverlayShape(overlayRadius: 28.0),
                  ),
                  child: Slider(
                    min: 1.0,
                    max: 100.0,
                    inactiveColor: const Color(0xff808080),
                    activeColor: Colors.amber,
                    value: V.ledValue[ledCh],
                    onChanged: V.ledStatus[ledCh]
                        ? (value) => setState(() {
                              // V.comFlag = false;
                              V.ledValue[ledCh] = value;
                              if (mobile) {
                                V.monitor =
                                    '${V.ledName[ledCh]} 밝기 값  ${V.ledValue[ledCh].round()}';
                              }
                              print('${V.ledName[ledCh]} Slider Value : '
                                  '${(V.ledValue[ledCh]).round()}..');
                            })
                        : null,
                    onChangeEnd: (double newValue) {
                      // V.comFlag = true;
                      server.getReq("LED", ledCh);
                      // V.comFlag = true;
                    },
                    label: (V.ledValue[ledCh]).round().toInt().toString(),
                  ),
                ),
              ),
              SizedBox(
                width: mobile ? 0 : dispWidth * 0.008,
              ),
              InkWell(
                child: Container(
                  color: Colors.transparent,
                  child: AnimatedContainer(
                    width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
                    height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
                    decoration: BoxDecoration(
                        color: const Color(0xff292d32),
                        borderRadius: BorderRadius.circular(mobile
                            ? (dispWidth * buttonRadius * 3)
                            : dispWidth * buttonRadius),
                        gradient: const LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: [
                            Color(0xff292d32),
                            Color(0xff292d32),
                          ],
                        ),
                        boxShadow: V.ledStatus[ledCh]
                            ? const [
                                BoxShadow(
                                  // color: Color(0xff464a4f),
                                  color: Colors.amber,
                                  offset: Offset(-2.0, -2.0),
                                  blurRadius: 6,
                                  spreadRadius: 0.0,
                                ),
                                BoxShadow(
                                  // color: Color(0xff0c1015),
                                  color: Colors.amber,
                                  offset: Offset(2.0, 2.0),
                                  blurRadius: 6,
                                  spreadRadius: 0.0,
                                ),
                              ]
                            : [
                                const BoxShadow(
                                  // color: Color(0xff464a4f),
                                  color: Color(0xff808080),
                                  offset: Offset(-0.1, -0.1),
                                  blurRadius: 1,
                                  spreadRadius: 0.0,
                                ),
                                const BoxShadow(
                                  // color: Color(0xff0c1015),
                                  color: Color(0xff808080),
                                  offset: Offset(0.1, 0.1),
                                  blurRadius: 1,
                                  spreadRadius: 0.0,
                                ),
                              ]),
                    duration: const Duration(seconds: 1),
                    curve: Curves.fastOutSlowIn,
                    child: Center(
                      child: Text(
                        V.ledName[ledCh],
                        style: TextStyle(
                            fontSize: mobile
                                ? (dispWidth * 0.04) / txtScale
                                : (dispWidth * 0.018) / txtScale,
                            color: V.ledStatus[ledCh]
                                ? Colors.amber
                                : const Color(0xff808080),
                            fontWeight: FontWeight.w700),
                      ),
                    ),
                  ),
                ),
                onTap: () {
                  setState(() {
                    V.ledStatus[ledCh]
                        ? V.ledStatus[ledCh] = false
                        : V.ledStatus[ledCh] = true;
                    server.getReq("LED", ledCh);
                    if (V.ledStatus[ledCh] == true) {
                      V.monitor = '${V.ledName[ledCh]} On..';
                      if (beep) {
                        advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
                      }
                    } else {
                      V.monitor = '${V.ledName[ledCh]} Off..';
                      if (beep) {
                        advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
                      }
                    }
                    print('_isChecked_led[ledCh] : ${V.ledStatus[ledCh]}');
                  });
                },
                onLongPress: () {},
              ),
              SizedBox(
                width: mobile ? dispWidth * 0.03 : dispWidth * 0.01,
              )
            ],
    );
  }
}

class OutProcess extends StatefulWidget {
  final int outCh;
  // ignore: use_key_in_widget_constructors
  const OutProcess(this.outCh);

  @override
  // ignore: no_logic_in_create_state, library_private_types_in_public_api
  _OutProcessState createState() => _OutProcessState(outCh);
}

class _OutProcessState extends State<OutProcess> {
  final int outCh;
  _OutProcessState(this.outCh);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        color: Colors.transparent,
        child: AnimatedContainer(
          width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
          height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
          decoration: BoxDecoration(
              color: const Color(0xff292d32),
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 3)
                  : dispWidth * buttonRadius),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xff292d32),
                  Color(0xff292d32),
                ],
              ),
              boxShadow: V.outStatus[outCh]
                  ? const [
                      BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Colors.amber,
                        offset: Offset(-2.0, -2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                      BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Colors.amber,
                        offset: Offset(2.0, 2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                    ]
                  : [
                      const BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Color(0xff808080),
                        offset: Offset(-0.1, -0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                      const BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Color(0xff808080),
                        offset: Offset(0.1, 0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                    ]),
          duration: const Duration(seconds: 1),
          curve: Curves.fastOutSlowIn,
          child: Center(
            child: Text(
              V.outName[outCh],
              textAlign: TextAlign.center,
              style: TextStyle(
                  fontSize: mobile
                      ? (dispWidth * 0.04) / txtScale
                      : (dispWidth * 0.018) / txtScale,
                  color: V.outStatus[outCh]
                      ? Colors.amber
                      : const Color(0xff808080),
                  fontWeight: FontWeight.w700),
            ),
          ),
        ),
      ),
      onTap: () async {
        if (outCh == 5) {
          if (V.outStatus[outCh] == true) {
            if (beep) advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
            V.outStatus[outCh] = false;
            V.monitor = '${V.outName[outCh]} Off..';
          } else {
            if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
            V.outStatus[outCh] = true;
            V.monitor = '${V.outName[outCh]} On..';
          }

          setState(() {
            // V.comFlag = true;
            V.outStatus[outCh]
                ? print('${V.outName[outCh]} On..')
                : print('${V.outName[outCh]} Off..');
            server.getReq("OUT", outCh);
          });
        } else if (V.outName[outCh] == '물펌프' && V.cleanWater == 0) {
          if (beep) advancedPlayer.play(AssetSource('sound/alert.mp3'));
          await showDialog(
            context: context,
            builder: (context) => AlertDialog(
              backgroundColor: const Color(0xC0D4AA39),
              title: Text(
                "청수가 0 % 입니다....",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: mobile
                      ? (dispWidth * 0.05) / txtScale
                      : (dispHeight * 0.035) / txtScale,
                ),
              ),
              actions: <Widget>[
                // ignore: deprecated_member_use
                SizedBox(
                  width: mobile ? dispWidth * 0.18 : dispWidth * 0.09,
                  height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                  child: ElevatedButton(
                      child: Text(
                        V.outStatus[outCh] ? "끄기" : "켜기",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (V.outStatus[outCh] == true) {
                          if (beep) {
                            advancedPlayer
                                .play(AssetSource('sound/switchOff.mp3'));
                          }
                          V.outStatus[outCh] = false;
                          V.monitor = '${V.outName[outCh]} Off..';
                          // server.getReq("OUT", outCh);
                        } else {
                          if (beep) {
                            advancedPlayer
                                .play(AssetSource('sound/switchOn.mp3'));
                          }
                          V.outStatus[outCh] = true;
                          V.monitor = '${V.outName[outCh]} On..';
                          // server.getReq("OUT", outCh);
                        }
                        server.getReq("OUT", outCh);
                        Get.back();
                        setState(() {});
                      }),
                ),
                SizedBox(width: mobile ? dispHeight * 0.04 : dispWidth * 0.04),
                SizedBox(
                  width: mobile ? dispWidth * 0.22 : dispWidth * 0.1,
                  height: mobile ? dispHeight * 0.045 : dispHeight * 0.07,
                  child: ElevatedButton(
                      child: Text(
                        "나가기",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        Get.back();
                      }),
                ),
              ],
            ),
          );
        } else {
          if (V.outStatus[outCh] == true) {
            if (beep) advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
            V.outStatus[outCh] = false;
            V.monitor = '${V.outName[outCh]} Off..';
          } else {
            if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
            V.outStatus[outCh] = true;
            V.monitor = '${V.outName[outCh]} On..';
          }
          server.getReq("OUT", outCh);
        }
      },
    );
  }
}

class InvertorProcess extends StatefulWidget {
  const InvertorProcess({Key? key}) : super(key: key);

  @override
  State<InvertorProcess> createState() => _InvertorProcessState();
}

class _InvertorProcessState extends State<InvertorProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        color: Colors.transparent,
        child: AnimatedContainer(
          width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
          height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
          decoration: BoxDecoration(
              color: const Color(0xff292d32),
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 3)
                  : dispWidth * buttonRadius),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xff292d32),
                  Color(0xff292d32),
                ],
              ),
              boxShadow: V.invertorStatus
                  ? const [
                      BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Colors.amber,
                        offset: Offset(-2.0, -2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                      BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Colors.amber,
                        offset: Offset(2.0, 2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                    ]
                  : [
                      const BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Color(0xff808080),
                        offset: Offset(-0.1, -0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                      const BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Color(0xff808080),
                        offset: Offset(0.1, 0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                    ]),
          duration: const Duration(seconds: 1),
          curve: Curves.fastOutSlowIn,
          child: Center(
            child: Text(
              '인버터',
              style: TextStyle(
                  fontSize: mobile
                      ? (dispWidth * 0.04) / txtScale
                      : (dispWidth * 0.018) / txtScale,
                  color:
                      V.invertorStatus ? Colors.amber : const Color(0xff808080),
                  fontWeight: FontWeight.w700),
            ),
          ),
        ),
      ),
      onTap: () async {
        // V.comFlag = false;
        if (V.invertorStatus == true) {
          if (beep) advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
          V.invertorStatus = false;
          V.monitor = '인버터 Off..';
        } else {
          if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
          V.invertorStatus = true;
          V.monitor = '인버터 On..';
        }
        setState(() {});
        // V.comFlag = true;
        server.getReq("INVERTOR", 0);
        sendCmd('{"division":"request","Value":1}');
        V.invertorStatus ? print('인버터 On..') : print('인버터 Off..');
      },
    );
  }
}

class AllLedProcess extends StatefulWidget {
  const AllLedProcess({Key? key}) : super(key: key);

  @override
  State<AllLedProcess> createState() => _AllLedProcessState();
}

class _AllLedProcessState extends State<AllLedProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        color: Colors.transparent,
        child: AnimatedContainer(
          width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
          height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
          decoration: BoxDecoration(
              color: const Color(0xff292d32),
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 3)
                  : dispWidth * buttonRadius),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xff292d32),
                  Color(0xff292d32),
                ],
              ),
              boxShadow: V.allLedStatus
                  ? const [
                      BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Colors.amber,
                        offset: Offset(-2.0, -2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                      BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Colors.amber,
                        offset: Offset(2.0, 2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                    ]
                  : [
                      const BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Color(0xff808080),
                        offset: Offset(-0.1, -0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                      const BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Color(0xff808080),
                        offset: Offset(0.1, 0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                    ]),
          duration: const Duration(seconds: 1),
          curve: Curves.fastOutSlowIn,
          child: Center(
            child: Text(
              '전체등',
              style: TextStyle(
                  fontSize: mobile
                      ? (dispWidth * 0.04) / txtScale
                      : (dispWidth * 0.018) / txtScale,
                  color:
                      V.allLedStatus ? Colors.amber : const Color(0xff808080),
                  fontWeight: FontWeight.w700),
            ),
          ),
        ),
      ),
      onTap: () async {
        if (V.allLedStatus == true) {
          if (beep) advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
          V.allLedStatus = false;
          V.monitor = '전체등 Off..';
        } else {
          if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
          V.allLedStatus = true;
          V.monitor = '전체등 On..';
        }
        setState(() {});
        // V.comFlag = true;
        server.getReq("ALL", V.allLedStatus ? 1 : 0);
        // : server.getReq("ALL", 0);
        V.allLedStatus ? print('전체등 On..') : print('전체등 Off..');
      },
    );
  }
}

class PopUpProcess extends StatefulWidget {
  const PopUpProcess({Key? key}) : super(key: key);

  @override
  State<PopUpProcess> createState() => _PopUpProcessState();
}

class _PopUpProcessState extends State<PopUpProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        color: Colors.transparent,
        child: AnimatedContainer(
          width: mobile ? dispWidth * 0.2 : dispWidth * 0.1,
          height: mobile ? dispHeight * 0.06 : dispHeight * 0.1,
          decoration: BoxDecoration(
              color: const Color(0xff292d32),
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 3)
                  : dispWidth * buttonRadius),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xff292d32),
                  Color(0xff292d32),
                ],
              ),
              boxShadow: V.outStatus[1]
                  ? const [
                      BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Colors.amber,
                        offset: Offset(-2.0, -2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                      BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Colors.amber,
                        offset: Offset(2.0, 2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                    ]
                  : [
                      const BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Color(0xff808080),
                        offset: Offset(-0.1, -0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                      const BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Color(0xff808080),
                        offset: Offset(0.1, 0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                    ]),
          duration: const Duration(seconds: 1),
          curve: Curves.fastOutSlowIn,
          child: Center(
            child: Text(
              '팝업텐트 ',
              textAlign: TextAlign.center,
              style: TextStyle(
                  fontSize: mobile
                      ? (dispWidth * 0.04) / txtScale
                      : (dispWidth * 0.018) / txtScale,
                  color:
                      V.outStatus[1] ? Colors.amber : const Color(0xff808080),
                  fontWeight: FontWeight.w700),
            ),
          ),
        ),
      ),
      onTap: () async {
        if (beep) advancedPlayer.play(AssetSource('sound/dongdong.mp3'));
        await showDialog(
          context: context,
          builder: (context) => AlertDialog(
            backgroundColor: const Color(0xC0D4AA39),
            title: Text(
              "팝업텐트를...",
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: mobile
                    ? (dispWidth * 0.06) / txtScale
                    : (dispHeight * 0.04) / txtScale,
                color: Colors.white,
              ),
            ),
            actions: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  SizedBox(
                    width: mobile ? dispWidth * 0.1 : dispWidth * 0.04, // 고정...
                    height: mobile ? 30 : dispWidth * 0.035, // 고정...
                    child: Image.asset(
                      'assets/images/PopUp.png',
                      color: Colors.black,
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.2 : dispWidth * 0.11,
                    height: mobile ? dispHeight * 0.055 : dispHeight * 0.075,
                    child: ElevatedButton(
                      child: Text(
                        "올림",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/switchOn.mp3'));
                        }
                        V.outStatus[2] = false;
                        server.getReq("OUT", 2);
                        V.outStatus[1] = true;
                        V.monitor = '${V.outName[1]} On..';
                        server.getReq("OUT", 1);
                        Get.back();
                      },
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.1 : dispWidth * 0.04, // 고정...
                    height: mobile ? 30 : dispWidth * 0.035, // 고정...
                    child: Image.asset(
                      'assets/images/PopDown.png',
                      color: Colors.black,
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.2 : dispWidth * 0.11,
                    height: mobile ? dispHeight * 0.055 : dispHeight * 0.075,
                    child: ElevatedButton(
                      child: Text(
                        "내림",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/switchOn.mp3'));
                        }
                        V.outStatus[1] = false;
                        server.getReq("OUT", 1);
                        V.outStatus[2] = true;
                        V.monitor = '${V.outName[2]} On..';
                        server.getReq("OUT", 2);
                        Get.back();
                      },
                    ),
                  ),
                ],
              ),
              SizedBox(
                height: mobile ? dispHeight * 0.02 : dispHeight * 0.03,
              ),
            ],
          ),
        );
      },
    );
  }
}

class MicroWaveProcess extends StatefulWidget {
  const MicroWaveProcess({Key? key}) : super(key: key);

  @override
  State<MicroWaveProcess> createState() => _MicroWaveProcessState();
}

class _MicroWaveProcessState extends State<MicroWaveProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        color: Colors.transparent,
        child: AnimatedContainer(
          width: mobile ? dispWidth * 0.2 : dispWidth * 0.1,
          height: mobile ? dispHeight * 0.06 : dispHeight * 0.1,
          decoration: BoxDecoration(
              color: const Color(0xff292d32),
              borderRadius: BorderRadius.circular(mobile
                  ? (dispWidth * buttonRadius * 3)
                  : dispWidth * buttonRadius),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xff292d32),
                  Color(0xff292d32),
                ],
              ),
              boxShadow: V.outStatus[3]
                  ? const [
                      BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Colors.amber,
                        offset: Offset(-2.0, -2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                      BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Colors.amber,
                        offset: Offset(2.0, 2.0),
                        blurRadius: 6,
                        spreadRadius: 0.0,
                      ),
                    ]
                  : [
                      const BoxShadow(
                        // color: Color(0xff464a4f),
                        color: Color(0xff808080),
                        offset: Offset(-0.1, -0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                      const BoxShadow(
                        // color: Color(0xff0c1015),
                        color: Color(0xff808080),
                        offset: Offset(0.1, 0.1),
                        blurRadius: 1,
                        spreadRadius: 0.0,
                      ),
                    ]),
          duration: const Duration(seconds: 1),
          curve: Curves.fastOutSlowIn,
          child: Center(
            child: Text(
              // V.outStatus[3] ? '전자렌지    상  승' : '전자렌지    하  강',
              '전자렌지',
              textAlign: TextAlign.center,
              style: TextStyle(
                  fontSize: mobile
                      ? (dispWidth * 0.04) / txtScale
                      : (dispWidth * 0.018) / txtScale,
                  color:
                      V.outStatus[3] ? Colors.amber : const Color(0xff808080),
                  fontWeight: FontWeight.w700),
            ),
          ),
        ),
      ),
      onTap: () async {
        if (beep) advancedPlayer.play(AssetSource('sound/dongdong.mp3'));
        await showDialog(
          context: context,
          builder: (context) => AlertDialog(
            backgroundColor: const Color(0xC0D4AA39),
            title: Text(
              // V.outStatus[3] ? "전자렌지를 내립니다." : "전자렌지를 올립니다.",
              "전자렌지를...",
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: mobile
                    ? (dispWidth * 0.05) / txtScale
                    : (dispHeight * 0.04) / txtScale,
                color: Colors.white,
              ),
            ),
            actions: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  SizedBox(
                    width: mobile ? dispWidth * 0.1 : dispWidth * 0.04, // 고정...
                    height: mobile ? 30 : dispWidth * 0.035, // 고정...
                    child: Image.asset(
                      'assets/images/MicroWaveUp.png',
                      color: Colors.black,
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.2 : dispWidth * 0.11,
                    height: mobile ? dispHeight * 0.055 : dispHeight * 0.075,
                    child: ElevatedButton(
                      child: Text(
                        "올림",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/switchOn.mp3'));
                        }
                        V.outStatus[4] = false;
                        server.getReq("OUT", 4);
                        V.outStatus[3] = true;
                        V.monitor = '${V.outName[3]} On..';
                        server.getReq("OUT", 3);
                        // if (V.outStatus[3] == true) {
                        //   if (beep) audioCache.play('sound/switchOff.mp3');
                        //   V.outStatus[3] = false;
                        //   V.monitor = '${V.outName[3]} Off..';
                        //   server.getReq("OUT", 3);
                        //   V.outStatus[4] = true;
                        //   server.getReq("OUT", 4);
                        // } else {
                        //   if (beep) audioCache.play('sound/switchOn.mp3');
                        //   V.outStatus[4] = false;
                        //   server.getReq("OUT", 4);
                        //   V.outStatus[3] = true;
                        //   V.monitor = '${V.outName[3]} On..';
                        //   server.getReq("OUT", 3);
                        // }
                        Get.back();
                      },
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.1 : dispWidth * 0.04, // 고정...
                    height: mobile ? 30 : dispWidth * 0.035, // 고정...
                    child: Image.asset(
                      'assets/images/MicroWaveDown.png',
                      color: Colors.black,
                    ),
                  ),
                  SizedBox(
                    width: mobile ? dispWidth * 0.2 : dispWidth * 0.11,
                    height: mobile ? dispHeight * 0.055 : dispHeight * 0.075,
                    child: ElevatedButton(
                      child: Text(
                        "내림",
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: mobile
                              ? (dispWidth * 0.04) / txtScale
                              : (dispHeight * 0.03) / txtScale,
                        ),
                      ),
                      onPressed: () {
                        if (beep) {
                          advancedPlayer
                              .play(AssetSource('sound/switchOn.mp3'));
                        }
                        V.outStatus[3] = false;
                        server.getReq("OUT", 3);
                        V.outStatus[4] = true;
                        V.monitor = '${V.outName[4]} On..';
                        server.getReq("OUT", 4);
                        Get.back();
                      },
                    ),
                  ),
                ],
              ),
              SizedBox(
                height: mobile ? dispHeight * 0.02 : dispHeight * 0.03,
              ),
            ],
          ),
        );
      },
    );
  }
}

class CleanValveProcess extends StatefulWidget {
  const CleanValveProcess({Key? key}) : super(key: key);

  @override
  State<CleanValveProcess> createState() => _CleanValveProcessState();
}

class _CleanValveProcessState extends State<CleanValveProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        decoration: BoxDecoration(
          color: sp1Flag ? outOnColor : outOffColor,
          borderRadius: BorderRadius.circular(mobile
              ? (dispWidth * buttonRadius * 1.5)
              : dispWidth * buttonRadius),
          boxShadow: [
            BoxShadow(
                // color: Colors.white,
                color: sp1Flag ? Colors.white : Colors.black38,
                offset: const Offset(-3.0, -3.0),
                // offset: mobile
                //     ? const Offset(-3.0, -3.0)
                //     : const Offset(-3.0, -3.0),
                blurRadius: 5.0,
                spreadRadius: 1.0),
            BoxShadow(
                // color: Colors.black,
                color: sp1Flag ? Colors.white : Colors.black,
                offset: const Offset(2.0, 2.0),
                // offset: mobile
                //     ? const Offset(3.0, 3.0)
                //     : const Offset(2.0, 2.0),
                blurRadius: 5.0,
                spreadRadius: 1.0),
          ],
        ),
        width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
        height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
        child: Padding(
          padding: const EdgeInsets.all(3.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: <Widget>[
              Text(
                '청수퇴수',
                style: TextStyle(
                    fontSize: mobile
                        ? (dispWidth * 0.036) / txtScale
                        : (dispWidth * 0.018) / txtScale,
                    color: sp1Flag ? Colors.white : Colors.black,
                    fontWeight: FontWeight.w800),
              )
            ],
          ),
        ),
      ),
      onTap: () {
        // V.comFlag = false;
        // V.comFlag = false;
        sp1Flag ? sp1Flag = false : sp1Flag = true;
        setState(() {
          if (sp1Flag == true) {
            V.monitor =
                // '${V.ledName[0]} On..';
                '오수밸브 열림..';
            if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
          } else {
            V.monitor = '오수밸브 닫힘..';
            // '${V.ledName[0]} Off..';
            if (beep) {
              advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
            }
          }
          print('sp1Flag : $sp1Flag');
          // V.comFlag = true;
          server.getReq("sp1", sp1Flag ? 1 : 0);
        });
      },
      onLongPress: () {},
    );
  }
}

class WasteValveProcess extends StatefulWidget {
  const WasteValveProcess({Key? key}) : super(key: key);

  @override
  State<WasteValveProcess> createState() => _WasteValveProcessState();
}

class _WasteValveProcessState extends State<WasteValveProcess> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      child: Container(
        decoration: BoxDecoration(
          color: sp2Flag ? outOnColor : outOffColor,
          borderRadius: BorderRadius.circular(mobile
              ? (dispWidth * buttonRadius * 1.5)
              : dispWidth * buttonRadius),
          boxShadow: [
            BoxShadow(
                // color: Colors.white,
                color: sp2Flag ? Colors.white : Colors.black38,
                offset: const Offset(-3.0, -3.0),
                // offset: mobile
                //     ? const Offset(-3.0, -3.0)
                //     : const Offset(-3.0, -3.0),
                blurRadius: 5.0,
                spreadRadius: 1.0),
            BoxShadow(
                // color: Colors.black,
                color: sp2Flag ? Colors.white : Colors.black,
                offset: const Offset(2.0, 2.0),
                // offset: mobile
                //     ? const Offset(3.0, 3.0)
                //     : const Offset(2.0, 2.0),
                blurRadius: 5.0,
                spreadRadius: 1.0),
          ],
        ),
        width: mobile ? dispWidth * 0.16 : dispWidth * 0.09,
        height: mobile ? dispHeight * 0.045 : dispHeight * 0.08,
        child: Padding(
          padding: const EdgeInsets.all(3.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: <Widget>[
              Text(
                '오수퇴수',
                style: TextStyle(
                    fontSize: mobile
                        ? (dispWidth * 0.036) / txtScale
                        : (dispWidth * 0.018) / txtScale,
                    color: sp2Flag ? Colors.white : Colors.black,
                    fontWeight: FontWeight.w800),
              )
            ],
          ),
        ),
      ),
      onTap: () {
        // V.comFlag = false;
        sp2Flag ? sp2Flag = false : sp2Flag = true;
        setState(() {
          if (sp2Flag == true) {
            V.monitor = '청수밸브 열림..';
            if (beep) advancedPlayer.play(AssetSource('sound/switchOn.mp3'));
          } else {
            V.monitor = '청수밸브 닫힘..';
            if (beep) {
              advancedPlayer.play(AssetSource('sound/switchOff.mp3'));
            }
          }
          print('sp2Flag : $sp2Flag');
          // V.comFlag = true;
          server.getReq("sp2", sp2Flag ? 1 : 0);
        });
      },
      onLongPress: () {},
    );
  }
}

class LandScreen extends StatefulWidget {
  const LandScreen({Key? key}) : super(key: key);
  @override
  State<LandScreen> createState() => _LandScreenState();
}

class _LandScreenState extends State<LandScreen> {
  @override
  Widget build(BuildContext context) {
    return Container(
      color: const Color(0xff333333),
      // decoration: BoxDecoration(
      //   //     gradient: LinearGradient(
      //   //   begin: Alignment.centerLeft,
      //   //   end: Alignment.centerRight,
      //   //   colors: const [Color(0xff4ca1af), Color(0xff4ca1af)],
      //   // ),
      child: Scaffold(
        // landscape 디자인...
        backgroundColor: Colors.transparent, //Colors.transparent,
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(
            dispHeight * appBarHeight,
          ),
          child: const AppBarScreen(), // 공통으로 적용...
        ),

        body: SingleChildScrollView(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Container(
                // Display 창...
                width: dispWidth * 0.2,
                height: dispHeight * 0.919,
                margin: EdgeInsets.symmetric(vertical: dispHeight * 0.001),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(dispWidth * borderRadius),
                  border: Border.all(
                      width: dispWidth * boardLine,
                      color: Colors.white54), //Container 테두리 값, 색상
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: <Widget>[
                    SizedBox(
                      // Battery Icon 및 전압 표시...
                      height: dispHeight * 0.1, //Battery Icon 높이 기존 : 100
                      child: InkWell(
                        onTap: () {
                          ++V.voltCount;
                          // 시동 battery, Solar 가 결선 되어 있을 때 표시...
                          if (V.voltCount == 2 && !V.carVoltFlag) {
                            ++V.voltCount;
                          }
                          if (V.voltCount == 3 && !V.solarVoltFlag) {
                            ++V.voltCount;
                          }
                          if (beep) {
                            advancedPlayer
                                .play(AssetSource('sound/dongdong.mp3'));
                          }
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: <Widget>[
                            Container(
                              // width: 45.0, //Battery Icon 폭
                              // height: 30.0, //Battery Icon 높이 기존 : 100
                              width: mobile
                                  ? (dispWidth * 0.06) * 1.1
                                  : (dispWidth * 0.06) * 0.9, //Battery Icon 폭
                              height:
                                  dispWidth * 0.045, //Battery Icon 높이 기존 : 100
                              decoration: BoxDecoration(
                                image: DecorationImage(
                                  image: AssetImage(voltPng),
                                  colorFilter: ColorFilter.mode(
                                      netFlag
                                          ? Colors.white
                                          : const Color(0xff808080),
                                      BlendMode.srcIn),
                                  fit: BoxFit.fill,
                                ),
                              ),
                            ),
                            Text(
                              // '${(V.btVolt).toString()} V',
                              netFlag ? voltText : '--.- V',
                              textAlign: TextAlign.right,
                              style: TextStyle(
                                fontWeight: FontWeight.w700,
                                fontSize: (dispWidth * 0.028) /
                                    txtScale, //Battery 전압 Size 기존 : 38
                                fontStyle: FontStyle.italic,
                                color: netFlag
                                    ? Colors.white
                                    : const Color(0xff808080),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(
                      // 온도계 및 온도표시...
                      // height: 50, //Battery Icon 높이 기존 : 100
                      height: dispHeight * 0.1, //Battery Icon 높이 기존 : 100
                      child: InkWell(
                        onTap: () {
                          // 온도 센서가 꽂혀 있을 경우에만 표시...
                          // ++V.tempCount;
                          // if (V.tempCount == 2 && !V.aIN1tFlag) {
                          //   ++V.tempCount;
                          // }
                          // if (V.tempCount == 3 && !V.aIN2tFlag) {
                          //   ++V.tempCount;
                          // }
                          // if (V.tempCount == 4 && !V.aIN3tFlag) {
                          //   ++V.tempCount;
                          // }
                          // if (beep) audioCache.play('sound/dongdong.mp3');
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: <Widget>[
                            SizedBox(
                              width: dispWidth * 0.003,
                            ),
                            Container(
                              width: (dispWidth * 0.06) / 1.2, //Battery Icon 폭
                              height:
                                  dispWidth * 0.045, //Battery Icon 높이 기존 : 100
                              decoration: BoxDecoration(
                                image: DecorationImage(
                                  // image: AssetImage(tempPng),
                                  image: const AssetImage(
                                      'assets/images/temp.png'),
                                  colorFilter: ColorFilter.mode(
                                      // mainIconColor, BlendMode.srcIn),
                                      netFlag
                                          ? Colors.white
                                          : const Color(0xff808080),
                                      BlendMode.srcIn),
                                  fit: BoxFit.fill,
                                ),
                              ),
                            ),
                            Text(
                              // '${V.temperature.toString()} ℃ ',
                              netFlag ? tempText : '--.- ℃',
                              textAlign: TextAlign.right,
                              style: TextStyle(
                                fontWeight: FontWeight.w700,
                                fontSize: (dispWidth * 0.028) / txtScale,
                                fontStyle: FontStyle.italic,
                                color: netFlag
                                    ? Colors.white
                                    : const Color(0xff808080),
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                    SizedBox(
                      // 습도계 및 습도표시...
                      height: dispHeight * 0.1, //습도계 SizeBox 높이 기존 : 100
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: <Widget>[
                          SizedBox(
                            width: dispWidth * 0.001,
                          ),
                          Container(
                            // width: 30.0, //Battery Icon 폭
                            // height: 32.0, //Battery Icon 높이 기존 : 100
                            width: (dispWidth * 0.06) / 1.25, //Battery Icon 폭
                            height:
                                dispWidth * 0.045, //Battery Icon 높이 기존 : 100
                            decoration: BoxDecoration(
                              image: DecorationImage(
                                image: const AssetImage(
                                    'assets/images/humidity.png'),
                                colorFilter: ColorFilter.mode(
                                    netFlag
                                        ? Colors.white
                                        : const Color(0xff808080),
                                    BlendMode.srcIn),
                                fit: BoxFit.fill,
                              ),
                            ),
                          ),
                          Text(
                            netFlag ? '${V.humidity.toString()} % ' : '--.- %',
                            textAlign: TextAlign.right,
                            style: TextStyle(
                              fontWeight: FontWeight.w700,
                              fontSize: (dispWidth * 0.028) / txtScale,
                              fontStyle: FontStyle.italic,
                              color: netFlag
                                  ? Colors.white
                                  : const Color(0xff808080),
                            ),
                          )
                        ],
                      ),
                    ),
                    !serialDebug
                        ?
                        // InvertorProcess()
                        Column(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              InkWell(
                                onLongPress: () async {
                                  // await Get.toNamed('/watertank');
                                },
                                child: CircularPercentIndicator(
                                  radius: dispWidth * 0.115,
                                  lineWidth: dispWidth * 0.02,
                                  percent: netFlag ? V.cleanWater / 100.0 : 0.0,
                                  // arcBackgroundColor: const Color(0xff5a5a5a),
                                  arcBackgroundColor: cleanBackColor,
                                  arcType: ArcType.FULL,
                                  center: Text(
                                    V.cleanSensor
                                        ? netFlag
                                            ? "${V.cleanWater.toString()}%"
                                            : "---"
                                        : "---",
                                    style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: (dispWidth * 0.025) / txtScale,
                                      color: V.cleanSensor
                                          ? mainFontColor
                                          : const Color(0xff808080),
                                    ),
                                  ),
                                  circularStrokeCap: CircularStrokeCap.round,
                                  backgroundColor: Colors.transparent,
                                  progressColor: Colors.blueAccent,
                                ),
                              ),
                              Text(
                                '청수',
                                style: TextStyle(
                                  fontWeight: FontWeight.w900,
                                  fontSize: (dispWidth * 0.02) / txtScale,
                                  color: V.cleanSensor
                                      ? mainFontColor
                                      : const Color(0xff808080),
                                ),
                              ),
                              SizedBox(
                                height: dispWidth * 0.01,
                              ),
                            ],
                          )
                        : Column(
                            // A Type (0~190) Sensor teaching mode 진입...
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              Text(
                                // cleanAdc.toString(),
                                aHighValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor High 값 전송...
                                onPressed: () {
                                  aHighValue = cleanAdc;
                                  server.getReq("aHighValue", aHighValue);
                                },
                                child: Text(
                                  "A High 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispHeight * 0.025) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                cleanAdc.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor Low 값 전송...
                                onPressed: () {
                                  aLowValue = cleanAdc;
                                  server.getReq("aLowValue", aLowValue);
                                },
                                child: Text(
                                  "A Low 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispHeight * 0.025) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                aLowValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                            ],
                          ),
                    !serialDebug
                        ?
                        // AllLedProcess()
                        Column(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              CircularPercentIndicator(
                                radius: dispWidth * 0.115,
                                lineWidth: dispWidth * 0.02,
                                percent: netFlag ? V.wasteWater / 100.0 : 0.0,
                                // arcBackgroundColor: const Color(0xff5a5a5a),
                                arcBackgroundColor: wasteBackColor,
                                arcType: ArcType.FULL,
                                center: Text(
                                  V.wasteSensor
                                      ? netFlag
                                          ? "${V.wasteWater.toString()}%"
                                          : "---"
                                      : "---",
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: (dispWidth * 0.025) / txtScale,
                                    color: V.cleanSensor
                                        ? mainFontColor
                                        : const Color(0xff808080),
                                  ),
                                ),
                                circularStrokeCap: CircularStrokeCap.round,
                                backgroundColor: Colors.transparent,
                                progressColor: Colors.red[700],
                              ),
                              Text(
                                '오수',
                                style: TextStyle(
                                  fontWeight: FontWeight.w900,
                                  fontSize: (dispWidth * 0.02) / txtScale,
                                  color: V.cleanSensor
                                      ? mainFontColor
                                      : const Color(0xff808080),
                                ),
                              )
                            ],
                          )
                        : Column(
                            // B Type (240~33) Sensor teaching mode 진입...
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              Text(
                                bHighValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor High 값 전송...
                                onPressed: () {
                                  bHighValue = wasteAdc;
                                  server.getReq("bHighValue", bHighValue);
                                },
                                child: Text(
                                  "B High 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispHeight * 0.025) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                wasteAdc.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                              ElevatedButton(
                                // A type Sensor Low 값 전송...
                                onPressed: () {
                                  bLowValue = wasteAdc;
                                  server.getReq("bLowValue", bLowValue);
                                },
                                child: Text(
                                  "B Low 저장",
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      // fontSize: 12.0 * V.textScaleRatio,
                                      fontSize: (dispHeight * 0.025) / txtScale,
                                      color: mainFontColor),
                                ),
                              ),
                              Text(
                                bLowValue.toString(),
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    // fontSize: 12.0 * V.textScaleRatio,
                                    fontSize: (dispHeight * 0.025) / txtScale,
                                    color: mainFontColor),
                              ),
                            ],
                          ),
                  ],
                ),
              ),
              SizedBox(
                width: dispWidth * 0.003,
              ),
              Column(
                // 전체등, 인버터 등 스위치...
                children: [
                  Container(
                    width: dispWidth * 0.796,
                    height: dispHeight * 0.15,
                    decoration: BoxDecoration(
                      // color: const Color(0xff3b3b3b),
                      color: Colors.transparent,
                      borderRadius:
                          BorderRadius.circular(dispWidth * borderRadius),
                      // border: Border.all(width: 2, color: Colors.lightGreen),
                      border: Border.all(
                          width: dispWidth * boardLine, color: Colors.white54),
                    ),
                    child: const Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      // ignore: prefer_const_literals_to_create_immutables
                      children: <Widget>[
                        AllLedProcess(),
                        InvertorProcess(),
                        OutProcess(5),
                        OutProcess(6),
                      ],
                    ),
                  ),
                  SizedBox(
                    height: dispHeight * 0.005,
                  ),
                  Row(
                    // LED 처리 Routine...
                    children: [
                      Container(
                        // width: dispWidth * 0.6615,
                        width: dispWidth * 0.633,
                        height: dispHeight * 0.765 // 12Ch...
                        ,
                        decoration: BoxDecoration(
                          // color: const Color(0xff3b3b3b),
                          color: Colors.transparent,
                          borderRadius:
                              BorderRadius.circular(dispWidth * borderRadius),
                          // border: Border.all(width: 2, color: Colors.lightGreen),
                          border: Border.all(
                              width: dispWidth * boardLine,
                              color: Colors.white54),
                        ),
                        child: Column(
                          // LED 버튼의 상하 간격 조절...
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          // ignore: prefer_const_literals_to_create_immutables
                          // children: <Widget>[
                          children: <Widget>[
                            LedProcess(1),
                            LedProcess(2),
                            LedProcess(3),
                            LedProcess(4),
                            LedProcess(5),
                            LedProcess(6),
                          ],
                        ),
                      ),
                      SizedBox(
                        width: dispWidth * 0.003,
                      ),
                      Container(
                        // 리프트 Part 처리 창...
                        width: dispWidth * 0.16,
                        height: dispHeight * 0.765,
                        decoration: BoxDecoration(
                          color: Colors.transparent,
                          borderRadius:
                              BorderRadius.circular(dispWidth * borderRadius),
                          border: Border.all(
                              width: dispWidth * boardLine,
                              color: Colors.white54),
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: <Widget>[
                            InkWell(
                              onTap: () {
                                V.outStatus[1] = false;
                                server.getReq("OUT", 1);
                                V.outStatus[2] = false;
                                server.getReq("OUT", 2);
                              },
                              child: SizedBox(
                                width: dispWidth * 0.06, // 고정...
                                height: dispHeight * 0.15, // 고정...
                                child: Image.asset(
                                  V.outStatus[1]
                                      ? 'assets/images/PopUp.png'
                                      : 'assets/images/PopDown.png',
                                  color: V.outStatus[1]
                                      ? Colors.amber
                                      : const Color(0xff808080),
                                ),
                              ),
                            ),
                            const PopUpProcess(),
                            SizedBox(
                              height: dispHeight * 0.03,
                            ),
                            InkWell(
                              onTap: () {
                                V.outStatus[3] = false;
                                server.getReq("OUT", 3);
                                V.outStatus[4] = false;
                                server.getReq("OUT", 4);
                              },
                              child: SizedBox(
                                width: dispWidth * 0.06, // 고정...
                                height: dispHeight * 0.1, // 고정...
                                child: Image.asset(
                                  V.outStatus[3]
                                      ? 'assets/images/MicroWaveUp.png'
                                      : 'assets/images/MicroWaveDown.png',
                                  color: V.outStatus[3]
                                      ? Colors.amber
                                      : const Color(0xff808080),
                                ),
                              ),
                            ),
                            const MicroWaveProcess(),
                            SizedBox(
                              height: dispHeight * 0.03,
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class WaterTank extends StatefulWidget {
  const WaterTank({Key? key}) : super(key: key);

  @override
  State<WaterTank> createState() => _WaterTankState();
}

class _WaterTankState extends State<WaterTank> {
  void handleTimeout() {
    print(DateTime.now());
    if (timerRun == false) startTimeout(1000);
  }

  startTimeout([int? milliseconds]) {
    var duration = milliseconds == null ? timeout : ms * milliseconds;
    return Timer(duration, handleTimeout);
  }

  @override
  Widget build(BuildContext context) {
    if (timerRun == true) {
      startTimeout(1000);
      timerRun = false;
      setState(() {});
    }
    return Scaffold(
      backgroundColor: Colors.grey,
      appBar: AppBar(
        title: const Text(
          '청수 탱크 모니터...',
          style: TextStyle(
              color: Colors.black, fontSize: 15.0, fontWeight: FontWeight.w600),
        ),
      ),
      body: Center(
        child: Row(
          children: [
            const SizedBox(
              height: 20,
            ),
            InkWell(
              onTap: () {
                setState(() {});
              },
              child: Container(
                width: 300.0, //Battery Icon 폭
                height: 300.0, //Battery Icon 높이 기존 : 100
                decoration: BoxDecoration(
                  image: const DecorationImage(
                    image: AssetImage('assets/images/water.png'),
                    fit: BoxFit.fill,
                  ),
                  color: Colors.lightBlue, //Display 창 배경 색
                  borderRadius: BorderRadius.circular(dispWidth * borderRadius),
                  border: Border.all(width: 2, color: Colors.white),
                ),
              ),
            ),
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                SizedBox(
                  height: 70,
                  width: 70,
                  child: CircularPercentIndicator(
                    radius: 60.0,
                    animation: true,
                    // animationDuration: aniDurateTimeCln,
                    lineWidth: 10.0,
                    percent: V.cleanWater / 100.0,
                    arcBackgroundColor: const Color(0xff5a5a5a),
                    arcType: ArcType.FULL,
                    center: Text(
                      V.cleanSensor ? "${V.cleanWater.toString()}%" : "---",
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 12.0 * V.textScaleRatio),
                    ),
                    circularStrokeCap: CircularStrokeCap.round,
                    backgroundColor: Colors.transparent,
                    progressColor: Colors.blue,
                  ),
                ),
                Text('청수',
                    style: TextStyle(
                        fontWeight: FontWeight.w900,
                        fontSize: 16.0 * V.textScaleRatio))
              ],
            ),
          ],
        ),
      ),
    );
  }
}

channelConnect() {
  //function to connect
  print("Try ChannelConnect...");
  try {
    channel =
        IOWebSocketChannel.connect("ws://192.168.4.1:81"); //channel IP : Port
    channel.stream.listen(
      (message) {
        print("Message : $message");
        recvMessage = message;

        if (message == "connected") {
          netFlag = true;
        } else {
          // ignore: prefer_typing_uninitialized_variables
          var parsedJson;
          // parsedJson = jsonDecode(recvMessage);
          parsedJson = jsonDecode(message);
          V.btVolt = parsedJson['aux_v'];

          // if (parsedJson['data'] == "false") {
          //   netFlag = true; //message is "connected" from NodeMCU
          // }
        }
        // else {
        //   // setState(() {
        //   // ignore: prefer_typing_uninitialized_variables
        //   var parsedJson;
        //   // parsedJson = jsonDecode(recvMessage);
        //   // parsedJson = jsonDecode(message);
        //   // if (parsedJson['Temperature'] > -50.0) {
        //   //   nowTemp = parsedJson['Temperature'].toStringAsFixed(1);
        //   // } else {
        //   //   nowTemp = "--.-";
        //   // }
        //   // modeIndexSelected = parsedJson['MODE'];
        //   // setTemp = parsedJson['SETTEMP'];
        //   // airVolume = parsedJson['anglePWM'];

        //   // if (modeIndexSelected == 1) {
        //   //   modeFlag = true;
        //   // } else {
        //   //   modeFlag = false;
        //   // }
        //   // print("MODE : $modeIndexSelected");
        //   // print("modeIndexSelected : $modeIndexSelected");

        //   // if (parsedJson['SOCKET'] == "connect") {
        //   connected = true; //message is "connected" from NodeMCU
        //   // }
        //   // });
        // }
      },
      onDone: () {
        //if WebSocket is disconnected
        print("Web socket is disconnected");
        netFlag = false;
      },
      onError: (error) {
        print(error.toString());
        print("Socket Error");
      },
    );
  } catch (_) {
    print("error on connecting to websocket.");
  }
}

Future<void> sendCmd(String cmd) async {
  print("Connected : $netFlag");
  print("cmd : $cmd");
  channel.sink.add(cmd);

  if (netFlag == true) {
    // if (ledStatus == false && cmd != "poweron" && cmd != "poweroff") {
    //   // ignore: avoid_print
    //   print("Send the valid command");
    // } else {
    //   channel.sink.add(cmd); //sending Command to NodeMCU
    channel.sink.add(cmd); //sending Command to NodeMCU
  } else {
    print("Websocket is not connected.");
    channelConnect();
  }
  // ignore: prefer_typing_uninitialized_variables, unused_local_variable
  var parsedJson;
  parsedJson = jsonDecode(recvMessage);

  // if (parsedJson['Temperature'] > -50.0) {
  //   nowTemp = parsedJson['Temperature'].toStringAsFixed(1);
  // } else {
  //   nowTemp = "--.-";
  // }

  // setTemp = parsedJson['SETTEMP'];
  // airVolume = parsedJson['anglePWM'];

  // print("setTemp:$setTemp, airVolume:$airVolume");
}

class Server {
  // ignore: duplicate_ignore

  Future<void> getReq(String division, int chanel) async {
    // return;
    // ignore: prefer_typing_uninitialized_variables
    var response;
    // ignore: prefer_typing_uninitialized_variables
    var parsedJson;

    // V.wiFiType = true;
    // bool wifiComFlag = false;

    // V.btVolt = 0.0;

    s = V.wiFiType ? aPIp : stationIp;

    Dio dio = Dio();
    // SharedPreferences prefs = await SharedPreferences.getInstance();

    if (V.comFlag == false) {
      s += "root";
      print('s : $s');
      response = await dio.get(s);
      print(response.statusCode);
      print(response.statusMessage);
      dio.close();
      return;
    } else if (division == "request") {
      s += "Request";
      response = await dio.get(s);
      parsedJson = jsonDecode(response.data);

      print(response.statusCode);
      print(response.statusMessage);

      (parsedJson['serialDebug'] == 1)
          ? serialDebug = true
          : serialDebug = false;
      if (serialDebug) {
        cleanAdc = parsedJson['cleanAdc'];
        wasteAdc = parsedJson['wasteAdc'];
      }
      // if (wifiComFlag == true) {
      V.btVolt = parsedJson['aux_v'];
      if (V.btVolt > 13.2) {
        // 전압에 따른 밧데리 색상 표현...
        batColor = Colors.amber;
      } else if (V.btVolt < 13.19 && V.btVolt > 12.5) {
        batColor = Colors.yellow;
      } else if (V.btVolt < 12.5) {
        batColor = Colors.red;
      }
      V.temperature = parsedJson['Temperature'];
      V.humidity = parsedJson['Humidity'];

      V.mainVolt = parsedJson['main_v'];
      V.solarVolt = parsedJson['solar_v'];

      // Battery icon 표시...
      if (V.voltCount == 4) {
        V.voltCount = 1;
      }
      if (V.voltCount == 1) {
        voltPng = 'assets/images/car-battery.png';
        voltText = '${(V.btVolt).toString()} V';
      }
      if (V.voltCount == 2) {
        voltPng = 'assets/images/car-battery.png';
        voltText = '${(V.mainVolt).toString()} V';
      }
      if (V.voltCount == 3) {
        voltPng = 'assets/images/solar.png';
        voltText = '${(V.solarVolt).toString()} V';
      }

// 온도계 icon 표시...
      if (V.tempCount >= 5) {
        V.tempCount = 1;
      }
      if (V.tempCount == 1) {
        // AHT10 온도...
        tempPng = 'assets/images/temp.png';
        tempText = '${V.temperature.toString()} ℃ ';
      }
      if (V.tempCount == 2) {
        // NCT 1번 온도...
        tempPng = 'assets/images/tempOut.png';
        tempText = V.aIN1tFlag ? '${V.aIN1.toString()} ℃ ' : '---';
      }
      if (V.tempCount == 3) {
        // NCT 2번 온도...
        tempPng = 'assets/images/water_tank.png';
        tempText = V.aIN2tFlag ? '${V.aIN2.toString()} ℃ ' : '---';
      }
      if (V.tempCount == 4) {
        // NCT 3번 온도...
        tempPng = 'assets/images/hotWater.png';
        tempText = V.aIN3tFlag ? '${V.aIN3.toString()} ℃ ' : '---';
      }

      // } else {
      //   V.btVolt = 0.0;
      //   V.temperature = 0.0;
      //   V.humidity = 0.0;
      // }

      for (int i = 1; i < 7; i++) {
        if (parsedJson['ledFlag$i'] == 1) {
          statusFlag = true;
        } else {
          statusFlag = false;
        }
        if (V.ledStatus[i] != statusFlag) {
          if (parsedJson['ledFlag$i'] == 1) {
            V.ledStatus[i] = true;
          } else {
            V.ledStatus[i] = false;
          }
          V.ledChangeFlag = true;
        }
      }

      for (int i = 1; i < 7; i++) {
        if (parsedJson['outOnOff$i'] == 1) {
          statusFlag = true;
        } else {
          statusFlag = false;
        }
        if (V.outStatus[i] != statusFlag) {
          if (parsedJson['outOnOff$i'] == 1) {
            V.outStatus[i] = true;
          } else {
            V.outStatus[i] = false;
          }
          V.outChangeFlag = true;
        }
      }
      if (parsedJson['invertor'] == 1) {
        statusFlag = true;
      } else {
        statusFlag = false;
      }
      if (V.invertorStatus != statusFlag) {
        if (parsedJson['invertor'] == 1) {
          V.invertorStatus = true;
        } else {
          V.invertorStatus = false;
        }
        V.outChangeFlag = true;
      }

      for (int i = 1; i < 5; i++) {
        pwm[i] = parsedJson['ledValue$i'];
        if (pwm[i] != 0) V.ledValue[i] = (pwm[i]).roundToDouble();
      }

      // if (chFlag) {
      //   V.spValue[1] = parsedJson['sp3Value'].roundToDouble();
      //   // if (V.spValue[1] < 1) {
      //   //   V.spValue[1] = 1.0;
      //   // }
      //   V.spValue[2] = parsedJson['sp4Value'].roundToDouble();
      //   // if (V.spValue[2] < 1) {
      //   //   V.spValue[2] = 1.0;
      //   // }
      // }

      // print("sp3Value = ${parsedJson['sp3Value']}");
      // print("sp4Value = ${parsedJson['sp4Value']}");

      // print("ledFlag0 = ${parsedJson['ledFlag0']}");
      // print("ledFlag1 = ${parsedJson['ledFlag1']}");
      // print("ledFlag2 = ${parsedJson['ledFlag2']}");
      // print("ledFlag3 = ${parsedJson['ledFlag3']}");
      // print("ledFlag4 = ${parsedJson['ledFlag4']}");
      // print("ledFlag5 = ${parsedJson['ledFlag5']}");
      // print("ledFlag6 = ${parsedJson['ledFlag6']}\n\r");

      // print("ledValue[1] = ${parsedJson['ledValue1']}");
      // print("ledValue[2] = ${parsedJson['ledValue2']}");
      // print("ledValue[3] = ${parsedJson['ledValue3']}");
      // print("ledValue[4] = ${parsedJson['ledValue4']}");
      // print("ledValue[5] = ${parsedJson['ledValue5']}");
      // print("ledValue[6] = ${parsedJson['ledValue6']}\n\r");

      // if (V.outChangeFlag == true) {
      //   print("outStatus[1] = ${parsedJson['outOnOff1']}");
      //   print("outStatus[2] = ${parsedJson['outOnOff2']}");
      //   print("outStatus[3] = ${parsedJson['outOnOff3']}");
      //   print("outStatus[4] = ${parsedJson['outOnOff4']}");
      //   print("outStatus[5] = ${parsedJson['outOnOff5']}");
      //   print("outStatus[6] = ${parsedJson['outOnOff6']}");
      //   print("invertor = ${parsedJson['invertor']}\n\r");
      //   V.outChangeFlag = false;
      // }

      // 청수 Sensor 가 없을 때...
      if (parsedJson['Clean'] == 255) {
        // 청수 Sensor 처리..
        V.cleanSensor = false;
        V.cleanWater = 0;
      } else {
        V.cleanSensor = true;
        V.cleanWater = parsedJson['Clean'];
        if (V.cleanWater > 96) {
          V.cleanWater = 100;
        }
      }

      // sleepFlag = parsedJson['sleep'];

      // if (parsedJson['sleep'] == true) {
      //   sleepFlag = true;
      // }

      // 오수 Sensor 가 없을 때...
      if (parsedJson['Waste'] == 255) {
        // 오수 Sensor 처리..
        V.wasteSensor = false;
        V.wasteWater = 0;
      } else {
        V.wasteSensor = true;
        V.wasteWater = parsedJson['Waste'];
        if (V.wasteWater > 96) {
          V.wasteWater = 100;
        }
      }

      if (parsedJson['sp1'] == 1) {
        sp1Flag = true;
      } else {
        sp1Flag = false;
      }
      if (parsedJson['sp2'] == 1) {
        sp2Flag = true;
      } else {
        sp2Flag = false;
      }
      // if (parsedJson['sp3'] == 1) {
      //   V.spStatus[1] = true;
      // } else {
      //   V.spStatus[1] = false;
      // }
      // if (parsedJson['sp4'] == 1) {
      //   V.spStatus[2] = true;
      // } else {
      //   V.spStatus[2] = false;
      // }

      if (parsedJson['ledAllFlag'] == 1) {
        V.allLedStatus = true;
      } else {
        V.allLedStatus = false;
      }

      if (parsedJson['sleep'] == 1) {
        sleepFlag = true;
      } else {
        sleepFlag = false;
      }
    } else if (division == "ALL") {
      s += 'json?j={"division":"$division","Chanel":$chanel}';
      if (wiFiCheck) response = await dio.get(s);
      var parsedJson = jsonDecode(response.data);
      var result = parsedJson['result'];
      print("parsedJson result: $result");
    } else if (division == "LED") {
      // LED 값을 "OFF"와 PWM 값으로 분리...
      if (V.ledStatus[chanel] == true) {
        var pwm = V.ledValue[chanel].round().toInt();
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":$pwm}';
        // if (wiFiCheck) response = await dio.get(s);
      } else {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":0}';
      }
      if (wiFiCheck) response = await dio.get(s);
      var parsedJson = jsonDecode(response.data);
      var result = parsedJson['result'];
      print("parsedJson result: $result");
    } else if (division == "OUT") {
      if (V.outStatus[chanel] == true) {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":1}';
        // if (wiFiCheck) response = await dio.get(s);
      } else {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":0}';
      }
      if (wiFiCheck) response = await dio.get(s);
      var parsedJson = jsonDecode(response.data);
      var result = parsedJson['result'];
      print("parsedJson result: $result");
    } else if (division == "INVERTOR") {
      if (V.invertorStatus == true) {
        s += 'json?j={"division":"$division","Value":1}';
        // if (wiFiCheck) response = await dio.get(s);
      } else {
        s += 'json?j={"division":"$division","Value":0}';
      }
      if (wiFiCheck) response = await dio.get(s);
      var parsedJson = jsonDecode(response.data);
      var result = parsedJson['result'];
      print("parsedJson result: $result");
    } else if (division == "sensorType") {
      if (chanel == 0) {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":0}';
        if (wiFiCheck) response = await dio.get(s);
      }
      var parsedJson = jsonDecode(response.data);
      var result = parsedJson['result'];
      print("parsedJson result: $result");
    } else if (division == "SensorSend") {
      // Sensor type 및 Level 값 전송...
      if (V.cleanSensorType == true) {
        s += 'json?j={"division":"clnSensor","cleanType":1}';
      } else {
        s += 'json?j={"division":"clnSensor","cleanType":0}';
      }
      print('s : $s');
      if (wiFiCheck) response = await dio.get(s);

      s = V.wiFiType ? aPIp : stationIp; // 지우지 말것...

      if (V.wasteSensorType == true) {
        s += 'json?j={"division":"wstSensor","wasteType":1}';
      } else {
        s += 'json?j={"division":"wstSensor","wasteType":0}';
      }
      print('s : $s');
      if (wiFiCheck) response = await dio.get(s);

      print('Sensor Type Trans Complete..');
      print("\n");
    } else if (division == "read") {
      // Sensor type 및 Level 값 전송...
      s += 'json?j={"division":"$division"}';
      if (wiFiCheck) response = await dio.get(s);
      var parsedJson = jsonDecode(response.data);

      if (parsedJson['cleanType'] == 1) {
        V.cleanSensorType = true;
      } else {
        V.cleanSensorType = false;
      }

      if (parsedJson['wasteType'] == 1) {
        V.wasteSensorType = true;
      } else {
        V.wasteSensorType = false;
      }
      print('Sensor Value Read Request...');
      print("\n");
      print(response.data); // 수신된 json data 모두 print
    } else if (division == "wifiSend") {
      // Hot Spot Mode를 위한 ssid, password 전송...
      if (chanel == 0) {
        // esp32에서 해당 값 읽어오기...
        s += 'json?j={"division":"$division","Chanel":$chanel}';
      } else if (chanel == 1) {
        // esp32로 해당 값 전송하기...
        s +=
            'json?j={"division":"$division","ssid":"${V.ssid}","password":"${V.password}","Chanel":$chanel}';
        // if (wiFiCheck) response = await dio.get(s);
      }
      if (wiFiCheck) response = await dio.get(s);
      // var parsedJson = jsonDecode(response.data);
      // V.ssid = parsedJson['ssid'];
      // V.password = parsedJson['password'];
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "PowerOff") {
      // 메인보드 Power OFF 값 전송...
      s += 'json?j={"division":"$division","Chanel":$chanel}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "sleep") {
      // 취침모드 상태 값 전송...
      s += 'json?j={"division":"$division","Chanel":$chanel}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "sp1") {
      // 청수밸브 상태 값 전송...
      s += 'json?j={"division":"$division","Chanel":$chanel}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "sp2") {
      // 오수밸브 상태 값 전송...
      s += 'json?j={"division":"$division","Chanel":$chanel}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "sp3") {
      if (V.spStatus[chanel] == true) {
        var pwm = V.spValue[chanel].round().toInt();
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":$pwm}';
        // if (wiFiCheck) response = await dio.get(s);
      } else {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":0}';
      }
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "sp4") {
      if (V.spStatus[chanel] == true) {
        var pwm = V.spValue[chanel].round().toInt();
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":$pwm}';
        // if (wiFiCheck) response = await dio.get(s);
      } else {
        s += 'json?j={"division":"$division","Chanel":$chanel,"Value":0}';
      }
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "aHighValue") {
      s += 'json?j={"division":"$division", "Value":$aHighValue}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "aLowValue") {
      s += 'json?j={"division":"$division", "Value":$aLowValue}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "bHighValue") {
      s += 'json?j={"division":"$division", "Value":$bHighValue}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "bLowValue") {
      s += 'json?j={"division":"$division", "Value":$bLowValue}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    } else if (division == "bLowValue") {
      s += 'json?j={"division":"$division", "Value":$bLowValue}';
      if (wiFiCheck) response = await dio.get(s);
      print(response.statusCode); // 송수신이 정상이면 "200"
      print(response.statusMessage); // 송수신이 정상이면 'OK'
    }

    if (response.statusCode == 200) {
      wifiCount = 0;
      print("response.statusCode : ${response.statusCode}");
    }

    dio.close();
  }
}
